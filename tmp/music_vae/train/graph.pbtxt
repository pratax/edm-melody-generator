node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "DropoutWrapperInit/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_1/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_1/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ToFloat"
  op: "Cast"
  input: "global_step/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ToFloat_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "ToFloat_1"
  op: "Cast"
  input: "ToFloat_1/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "ToFloat"
  input: "ToFloat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Exp"
  op: "Exp"
  input: "truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add"
  op: "AddV2"
  input: "ToFloat_1"
  input: "Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_1"
  op: "RealDiv"
  input: "ToFloat_1"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "sub/x"
  input: "truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sampling_probability/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "sampling_probability"
      }
    }
  }
}
node {
  name: "sampling_probability"
  op: "ScalarSummary"
  input: "sampling_probability/tags"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_2/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_2/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_3/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_3/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "DropoutWrapperInit_3/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "list_files/file_pattern"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "tmp/notesequences.tfrecord"
      }
    }
  }
}
node {
  name: "list_files/MatchingFiles"
  op: "MatchingFiles"
  input: "list_files/file_pattern"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "list_files/Shape"
  op: "Shape"
  input: "list_files/MatchingFiles"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "list_files/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "list_files/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "list_files/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "list_files/strided_slice"
  op: "StridedSlice"
  input: "list_files/Shape"
  input: "list_files/strided_slice/stack"
  input: "list_files/strided_slice/stack_1"
  input: "list_files/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "list_files/match_not_empty/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "list_files/match_not_empty"
  op: "Greater"
  input: "list_files/strided_slice"
  input: "list_files/match_not_empty/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "list_files/ReduceJoin/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "list_files/ReduceJoin/ReduceJoin"
  op: "ReduceJoin"
  input: "list_files/file_pattern"
  input: "list_files/ReduceJoin/Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
  attr {
    key: "separator"
    value {
      s: ", "
    }
  }
}
node {
  name: "list_files/message/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "No files matched pattern: "
      }
    }
  }
}
node {
  name: "list_files/message"
  op: "Add"
  input: "list_files/message/x"
  input: "list_files/ReduceJoin/ReduceJoin"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "list_files/assert_not_empty/Assert"
  op: "Assert"
  input: "list_files/match_not_empty"
  input: "list_files/message"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 1
    }
  }
}
node {
  name: "list_files/Identity"
  op: "Identity"
  input: "list_files/MatchingFiles"
  input: "^list_files/assert_not_empty/Assert"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "list_files/TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "list_files/Identity"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "is_files"
    value {
      b: true
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_STRING
          }
        }
      }
    }
  }
}
node {
  name: "list_files/Shape_1"
  op: "Shape"
  input: "list_files/Identity"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "list_files/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "list_files/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "list_files/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "list_files/strided_slice_1"
  op: "StridedSlice"
  input: "list_files/Shape_1"
  input: "list_files/strided_slice_1/stack"
  input: "list_files/strided_slice_1/stack_1"
  input: "list_files/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "list_files/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "list_files/Maximum"
  op: "Maximum"
  input: "list_files/strided_slice_1"
  input: "list_files/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "list_files/seed"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "list_files/seed2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "list_files/ShuffleDataset"
  op: "ShuffleDataset"
  input: "list_files/TensorSliceDataset"
  input: "list_files/Maximum"
  input: "list_files/seed"
  input: "list_files/seed2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_STRING
          }
        }
      }
    }
  }
}
node {
  name: "cycle_length"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "block_length"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "buffer_output_elements"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "prefetch_input_elements"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "num_parallel_calls"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "ParallelInterleaveDatasetV4"
  op: "ParallelInterleaveDatasetV4"
  input: "list_files/ShuffleDataset"
  input: "cycle_length"
  input: "block_length"
  input: "buffer_output_elements"
  input: "prefetch_input_elements"
  input: "num_parallel_calls"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "deterministic"
    value {
      s: "default"
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_interleave_classabc.ABCMeta_76"
        attr {
          key: "_tf_data_function"
          value {
            b: true
          }
        }
      }
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_STRING
          }
        }
      }
    }
  }
}
node {
  name: "OptionsDataset"
  op: "OptionsDataset"
  input: "ParallelInterleaveDatasetV4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ParallelInterleaveDatasetV4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "serialized_options"
    value {
      s: "\010\000\022\000\032\000*\000:\000"
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_STRING
          }
        }
      }
    }
  }
}
node {
  name: "num_parallel_calls_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "ParallelMapDatasetV2"
  op: "ParallelMapDatasetV2"
  input: "OptionsDataset"
  input: "num_parallel_calls_1"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "deterministic"
    value {
      s: "default"
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_NoteSequenceAugmenter.tf_augment_88"
        attr {
          key: "_tf_data_function"
          value {
            b: true
          }
        }
      }
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_STRING
          }
        }
      }
    }
  }
}
node {
  name: "num_parallel_calls_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "ParallelMapDatasetV2_1"
  op: "ParallelMapDatasetV2"
  input: "ParallelMapDatasetV2"
  input: "num_parallel_calls_2"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "deterministic"
    value {
      s: "default"
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_wrapper_101"
        attr {
          key: "_tf_data_function"
          value {
            b: true
          }
        }
      }
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_BOOL
        type: DT_BOOL
        type: DT_BOOL
        type: DT_INT32
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_INT32
          }
        }
      }
    }
  }
}
node {
  name: "MapDataset"
  op: "MapDataset"
  input: "ParallelMapDatasetV2_1"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_normalize_113"
        attr {
          key: "_tf_data_function"
          value {
            b: true
          }
        }
      }
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_BOOL
        type: DT_BOOL
        type: DT_BOOL
        type: DT_INT32
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_INT32
          }
        }
      }
    }
  }
}
node {
  name: "UnbatchDataset"
  op: "UnbatchDataset"
  input: "MapDataset"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_BOOL
        type: DT_BOOL
        type: DT_BOOL
        type: DT_INT32
      }
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_INT32
          }
        }
      }
    }
  }
}
node {
  name: "num_parallel_calls_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "ParallelMapDatasetV2_2"
  op: "ParallelMapDatasetV2"
  input: "UnbatchDataset"
  input: "num_parallel_calls_3"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "deterministic"
    value {
      s: "default"
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map__remove_pad_fn_140"
        attr {
          key: "_tf_data_function"
          value {
            b: true
          }
        }
      }
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_BOOL
        type: DT_BOOL
        type: DT_BOOL
        type: DT_INT32
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_INT32
          }
        }
      }
    }
  }
}
node {
  name: "filename"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "CacheDataset"
  op: "CacheDataset"
  input: "ParallelMapDatasetV2_2"
  input: "filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_BOOL
        type: DT_BOOL
        type: DT_BOOL
        type: DT_INT32
      }
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_INT32
          }
        }
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 320
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "CacheDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_BOOL
        type: DT_BOOL
        type: DT_BOOL
        type: DT_INT32
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_INT32
          }
        }
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_BOOL
        type: DT_BOOL
        type: DT_BOOL
        type: DT_INT32
      }
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_INT32
          }
        }
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 32
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377Z\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377Z\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "padding_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "padding_value_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "padding_value_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "padding_value_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "PaddedBatchDatasetV2"
  op: "PaddedBatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "Const"
  input: "Const_1"
  input: "Const_2"
  input: "Const_3"
  input: "padding_value"
  input: "padding_value_1"
  input: "padding_value_2"
  input: "padding_value_3"
  input: "drop_remainder"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_BOOL
        type: DT_BOOL
        type: DT_BOOL
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_INT32
          }
        }
      }
    }
  }
}
node {
  name: "buffer_size_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "PrefetchDataset"
  op: "PrefetchDataset"
  input: "PaddedBatchDatasetV2"
  input: "buffer_size_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PaddedBatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "buffer_size_min"
    value {
      i: 0
    }
  }
  attr {
    key: "legacy_autotune"
    value {
      b: true
    }
  }
  attr {
    key: "metadata"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_BOOL
        type: DT_BOOL
        type: DT_BOOL
        type: DT_INT32
      }
    }
  }
  attr {
    key: "slack_period"
    value {
      i: 0
    }
  }
  experimental_type {
    type_id: TFT_PRODUCT
    args {
      type_id: TFT_DATASET
      args {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_BOOL
          }
        }
        args {
          type_id: TFT_TENSOR
          args {
            type_id: TFT_INT32
          }
        }
      }
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PaddedBatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_X5aC2J4u50I"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_BOOL
        type: DT_BOOL
        type: DT_BOOL
        type: DT_INT32
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PaddedBatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PaddedBatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_BOOL
        type: DT_BOOL
        type: DT_BOOL
        type: DT_INT32
      }
    }
  }
}
node {
  name: "ToFloat_2"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "ToFloat_3"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "Shape"
  op: "Shape"
  input: "ToFloat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Minimum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "Minimum"
  op: "Minimum"
  input: "strided_slice"
  input: "Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_1/stack"
  op: "Pack"
  input: "strided_slice_1/stack/0"
  input: "Const_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_1/stack_1/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_1"
  op: "Pack"
  input: "strided_slice_1/stack_1/0"
  input: "Minimum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_1/stack_2/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_2"
  op: "Pack"
  input: "strided_slice_1/stack_2/0"
  input: "Const_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_1"
  op: "StridedSlice"
  input: "ToFloat_2"
  input: "strided_slice_1/stack"
  input: "strided_slice_1/stack_1"
  input: "strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_2/stack"
  op: "Pack"
  input: "strided_slice_2/stack/0"
  input: "Const_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_2/stack_1/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_1"
  op: "Pack"
  input: "strided_slice_2/stack_1/0"
  input: "Minimum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_2/stack_2/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_2"
  op: "Pack"
  input: "strided_slice_2/stack_2/0"
  input: "Const_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_2"
  op: "StridedSlice"
  input: "ToFloat_3"
  input: "strided_slice_2/stack"
  input: "strided_slice_2/stack_1"
  input: "strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "sub_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sub_1"
  op: "Sub"
  input: "Minimum"
  input: "sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Const_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_3/stack"
  op: "Pack"
  input: "strided_slice_3/stack/0"
  input: "Const_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_3/stack_1/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_1"
  op: "Pack"
  input: "strided_slice_3/stack_1/0"
  input: "sub_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_3/stack_2/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_2"
  op: "Pack"
  input: "strided_slice_3/stack_2/0"
  input: "Const_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_3"
  op: "StridedSlice"
  input: "ToFloat_3"
  input: "strided_slice_3/stack"
  input: "strided_slice_3/stack_1"
  input: "strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Pad"
  op: "Pad"
  input: "strided_slice_3"
  input: "Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "Minimum_1"
  op: "Minimum"
  input: "IteratorGetNext:3"
  input: "Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/range"
  op: "Range"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/range/start"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/Rank"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/concat"
  op: "ConcatV2"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/concat/values_0"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/range"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/transpose"
  op: "Transpose"
  input: "strided_slice_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/sequence_length"
  op: "Identity"
  input: "Minimum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat"
  op: "ConcatV2"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros"
  op: "Fill"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat_1"
  op: "ConcatV2"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_4"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_5"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros_1"
  op: "Fill"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Equal"
  op: "Equal"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/Shape"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/All"
  op: "All"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/Equal"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor encoder/cell_0/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor encoder/cell_0/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Assert/Assert"
  op: "Assert"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/All"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/stack"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/CheckSeqLen"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/sequence_length"
  input: "^encoder/cell_0/bidirectional_rnn/fw/fw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Shape_1"
  op: "Shape"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/Shape_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/concat_1"
  op: "ConcatV2"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/Const_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/Const_2"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/zeros"
  op: "Fill"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/concat_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Min"
  op: "Min"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Max"
  op: "Max"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 90
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/transpose"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Maximum"
  op: "Maximum"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/Maximum/x"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Minimum"
  op: "Minimum"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/strided_slice"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Enter"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Enter_1"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Enter_2"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Enter_3"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Enter_4"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge"
  op: "Merge"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_1"
  op: "Merge"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Enter_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_2"
  op: "Merge"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Enter_2"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_3"
  op: "Merge"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Enter_3"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_4"
  op: "Merge"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Enter_4"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Less"
  op: "Less"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Less_1"
  op: "Less"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Less"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch"
  op: "Switch"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_1"
  op: "Switch"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_2"
  op: "Switch"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_2"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_3"
  op: "Switch"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_3"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_4"
  op: "Switch"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_4"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_1"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_2"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_3"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_4"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/add/y"
  op: "Const"
  input: "^encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/add"
  op: "AddV2"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "Z\002\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.047583095729351044
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.047583095729351044
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 602
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2048
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Assign"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/read"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/zeros"
  op: "Const"
  input: "^encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
  op: "LSTMBlockCell"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/zeros"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/zeros"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/zeros"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "cell_clip"
    value {
      f: -1.0
    }
  }
  attr {
    key: "forget_bias"
    value {
      f: 1.0
    }
  }
  attr {
    key: "use_peephole"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Select"
  op: "Select"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Select/Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Select/Enter"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1"
  op: "Select"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2"
  op: "Select"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Select"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/add_1/y"
  op: "Const"
  input: "^encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/add_1"
  op: "AddV2"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_4"
  op: "NextIteration"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Exit"
  op: "Exit"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Exit_1"
  op: "Exit"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Exit_2"
  op: "Exit"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Exit_3"
  op: "Exit"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Exit_4"
  op: "Exit"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/strided_slice"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArray"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/range_1"
  op: "Range"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/range_1/start"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/Rank_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/concat_2/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/concat_2"
  op: "ConcatV2"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/concat_2/values_0"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/range_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/fw/transpose_1"
  op: "Transpose"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/ReverseSequence"
  op: "ReverseSequence"
  input: "strided_slice_1"
  input: "Minimum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/range"
  op: "Range"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/range/start"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/Rank"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/concat"
  op: "ConcatV2"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/concat/values_0"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/range"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/transpose"
  op: "Transpose"
  input: "encoder/cell_0/bidirectional_rnn/bw/ReverseSequence"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/sequence_length"
  op: "Identity"
  input: "Minimum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat"
  op: "ConcatV2"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros"
  op: "Fill"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat_1"
  op: "ConcatV2"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_4"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_5"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros_1"
  op: "Fill"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Equal"
  op: "Equal"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/Shape"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/All"
  op: "All"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/Equal"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor encoder/cell_0/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor encoder/cell_0/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Assert/Assert"
  op: "Assert"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/All"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/stack"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/CheckSeqLen"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/sequence_length"
  input: "^encoder/cell_0/bidirectional_rnn/bw/bw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Shape_1"
  op: "Shape"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/Shape_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/concat_1"
  op: "ConcatV2"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/Const_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/Const_2"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/zeros"
  op: "Fill"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/concat_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Min"
  op: "Min"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Max"
  op: "Max"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 90
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/transpose"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Maximum"
  op: "Maximum"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/Maximum/x"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Minimum"
  op: "Minimum"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/strided_slice"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Enter"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Enter_1"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Enter_2"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Enter_3"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Enter_4"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge"
  op: "Merge"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_1"
  op: "Merge"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Enter_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_2"
  op: "Merge"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Enter_2"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_3"
  op: "Merge"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Enter_3"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_4"
  op: "Merge"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Enter_4"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Less"
  op: "Less"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Less_1"
  op: "Less"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Less"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch"
  op: "Switch"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_1"
  op: "Switch"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_2"
  op: "Switch"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_2"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_3"
  op: "Switch"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_3"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_4"
  op: "Switch"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_4"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_1"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_2"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_3"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_4"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/add/y"
  op: "Const"
  input: "^encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/add"
  op: "AddV2"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "Z\002\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.047583095729351044
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.047583095729351044
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 602
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2048
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Assign"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/read"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/zeros"
  op: "Const"
  input: "^encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
  op: "LSTMBlockCell"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/zeros"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/zeros"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/zeros"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "cell_clip"
    value {
      f: -1.0
    }
  }
  attr {
    key: "forget_bias"
    value {
      f: 1.0
    }
  }
  attr {
    key: "use_peephole"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Select"
  op: "Select"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Select/Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Select/Enter"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1"
  op: "Select"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2"
  op: "Select"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Select"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/add_1/y"
  op: "Const"
  input: "^encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/add_1"
  op: "AddV2"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_4"
  op: "NextIteration"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Exit"
  op: "Exit"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Exit_1"
  op: "Exit"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Exit_2"
  op: "Exit"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Exit_3"
  op: "Exit"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Exit_4"
  op: "Exit"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/strided_slice"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArray"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/range_1"
  op: "Range"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/range_1/start"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/Rank_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/concat_2/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/concat_2"
  op: "ConcatV2"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/concat_2/values_0"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/range_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/bw/transpose_1"
  op: "Transpose"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/ReverseSequence"
  op: "ReverseSequence"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/transpose_1"
  input: "Minimum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/cell_0/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/cell_0/concat"
  op: "ConcatV2"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/transpose_1"
  input: "encoder/cell_0/ReverseSequence"
  input: "encoder/cell_0/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Exit_4"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Exit_4"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "encoder/mu/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "encoder/mu/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/mu/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "encoder/mu/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "encoder/mu/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/mu/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "encoder/mu/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "encoder/mu/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/mu/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "encoder/mu/kernel/Initializer/random_normal/mul"
  input: "encoder/mu/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/mu/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/mu/kernel/Assign"
  op: "Assign"
  input: "encoder/mu/kernel"
  input: "encoder/mu/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/mu/kernel/read"
  op: "Identity"
  input: "encoder/mu/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/mu/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/mu/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/mu/bias/Assign"
  op: "Assign"
  input: "encoder/mu/bias"
  input: "encoder/mu/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/mu/bias/read"
  op: "Identity"
  input: "encoder/mu/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/mu/MatMul"
  op: "MatMul"
  input: "concat"
  input: "encoder/mu/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/mu/BiasAdd"
  op: "BiasAdd"
  input: "encoder/mu/MatMul"
  input: "encoder/mu/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/sigma/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "encoder/sigma/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/sigma/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "encoder/sigma/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "encoder/sigma/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/sigma/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "encoder/sigma/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "encoder/sigma/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/sigma/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "encoder/sigma/kernel/Initializer/random_normal/mul"
  input: "encoder/sigma/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/sigma/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/sigma/kernel/Assign"
  op: "Assign"
  input: "encoder/sigma/kernel"
  input: "encoder/sigma/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/sigma/kernel/read"
  op: "Identity"
  input: "encoder/sigma/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/sigma/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/sigma/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/sigma/bias/Assign"
  op: "Assign"
  input: "encoder/sigma/bias"
  input: "encoder/sigma/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/sigma/bias/read"
  op: "Identity"
  input: "encoder/sigma/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/sigma/MatMul"
  op: "MatMul"
  input: "concat"
  input: "encoder/sigma/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/sigma/BiasAdd"
  op: "BiasAdd"
  input: "encoder/sigma/MatMul"
  input: "encoder/sigma/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/sigma/Softplus"
  op: "Softplus"
  input: "encoder/sigma/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/shapes_from_loc_and_scale/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/shapes_from_loc_and_scale/event_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/shapes_from_loc_and_scale/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/shapes_from_loc_and_scale/loc_batch_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/shapes_from_loc_and_scale/batch_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/zeros"
  op: "Fill"
  input: "MultivariateNormalDiag/shapes_from_loc_and_scale/batch_shape"
  input: "MultivariateNormalDiag/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultivariateNormalDiag/ones"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/sample_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/sample_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/strided_slice"
  op: "StridedSlice"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/shape_as_tensor"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/strided_slice/stack"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/strided_slice/stack_1"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/strided_slice_1"
  op: "StridedSlice"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/shape_as_tensor_1"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/strided_slice_1/stack"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/strided_slice_1/stack_1"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/BroadcastArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/BroadcastArgs/s0_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/BroadcastArgs"
  op: "BroadcastArgs"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/BroadcastArgs/s0_1"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/BroadcastArgs_1"
  op: "BroadcastArgs"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/BroadcastArgs"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/concat"
  op: "ConcatV2"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/concat/values_0"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/BroadcastArgs_1"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/normal/random_normal/mean"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/normal/random_normal/stddev"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/normal/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/normal/random_normal/mul"
  op: "Mul"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/normal/random_normal/RandomStandardNormal"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/normal/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/normal/random_normal"
  op: "AddV2"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/normal/random_normal/mul"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/normal/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/mul"
  op: "Mul"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/normal/random_normal"
  input: "MultivariateNormalDiag/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/add"
  op: "AddV2"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/mul"
  input: "MultivariateNormalDiag/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/Reshape"
  op: "Reshape"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/add"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/transpose"
  op: "Transpose"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Normal/sample/Reshape"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/SampleNormal/sample/Reshape"
  op: "Reshape"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/transpose"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/scale_matvec_linear_operator/forward/LinearOperatorDiag/matvec/mul"
  op: "Mul"
  input: "encoder/sigma/Softplus"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/shift/forward/add"
  op: "AddV2"
  input: "MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/scale_matvec_linear_operator/forward/LinearOperatorDiag/matvec/mul"
  input: "encoder/mu/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag_1/loc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag_1/scale_diag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag_1/shapes_from_loc_and_scale/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag_1/shapes_from_loc_and_scale/event_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag_1/shapes_from_loc_and_scale/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag_1/shapes_from_loc_and_scale/loc_batch_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag_1/shapes_from_loc_and_scale/batch_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag_1/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag_1/zeros"
  op: "Fill"
  input: "MultivariateNormalDiag_1/shapes_from_loc_and_scale/batch_shape"
  input: "MultivariateNormalDiag_1/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultivariateNormalDiag_1/ones"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MultivariateNormalDiag_1/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/Abs"
  op: "Abs"
  input: "encoder/sigma/Softplus"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/BroadcastTo/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/BroadcastTo"
  op: "BroadcastTo"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/Abs"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/BroadcastTo/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/stddev/Abs"
  op: "Abs"
  input: "MultivariateNormalDiag_1/scale_diag"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/stddev/BroadcastTo/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/stddev/BroadcastTo"
  op: "BroadcastTo"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/stddev/Abs"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/stddev/BroadcastTo/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv"
  op: "RealDiv"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/BroadcastTo"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/stddev/BroadcastTo"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice"
  op: "StridedSlice"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice/stack"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice/stack_1"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det/Abs"
  op: "Abs"
  input: "MultivariateNormalDiag_1/scale_diag"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det/Log"
  op: "Log"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det/Sum"
  op: "Sum"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det/Log"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Abs"
  op: "Abs"
  input: "encoder/sigma/Softplus"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Log"
  op: "Log"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum"
  op: "Sum"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Log"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub"
  op: "Sub"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det/Sum"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/domain_dimension_tensor/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Cast"
  op: "Cast"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/domain_dimension_tensor/Const"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Neg"
  op: "Neg"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Square"
  op: "Square"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\376\377\377\377\377\377\377\377"
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum"
  op: "Sum"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Square"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add"
  op: "AddV2"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Neg"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/mean/MultivariateNormalDiag_1/batch_shape_tensor/scale_diag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        tensor_content: "\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?"
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/mean/MultivariateNormalDiag_1/batch_shape_tensor/scale_diag_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/mean/MultivariateNormalDiag_1/batch_shape_tensor/scale_diag_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/mean/MultivariateNormalDiag_1/batch_shape_tensor/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/mean/MultivariateNormalDiag_1/batch_shape_tensor/batch_shape"
  op: "Identity"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/mean/MultivariateNormalDiag_1/batch_shape_tensor/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/mean/MultivariateNormalDiag_1/event_shape_tensor/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/mean/MultivariateNormalDiag_1/event_shape_tensor/event_shape"
  op: "Identity"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/mean/MultivariateNormalDiag_1/event_shape_tensor/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/mean/BroadcastTo/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/mean/BroadcastTo"
  op: "BroadcastTo"
  input: "MultivariateNormalDiag_1/loc"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/mean/BroadcastTo/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/MultivariateNormalDiag/batch_shape_tensor/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/MultivariateNormalDiag/batch_shape_tensor/batch_shape"
  op: "Identity"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/MultivariateNormalDiag/batch_shape_tensor/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/MultivariateNormalDiag/event_shape_tensor/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/MultivariateNormalDiag/event_shape_tensor/event_shape"
  op: "Identity"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/MultivariateNormalDiag/event_shape_tensor/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/BroadcastTo/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/BroadcastTo"
  op: "BroadcastTo"
  input: "encoder/mu/BiasAdd"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/BroadcastTo/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1"
  op: "Sub"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/mean/BroadcastTo"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/BroadcastTo"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1"
  op: "StridedSlice"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1/stack"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1/stack_1"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/truediv/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/truediv"
  op: "RealDiv"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/truediv/x"
  input: "MultivariateNormalDiag_1/scale_diag"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/ExpandDims"
  op: "ExpandDims"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/truediv"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul"
  op: "Mul"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Square_1"
  op: "Square"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\376\377\377\377\377\377\377\377"
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1"
  op: "Sum"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Square_1"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_1"
  op: "AddV2"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul"
  op: "Mul"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul/x"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_2"
  op: "AddV2"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/scale_diag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ExpandDims"
  op: "ExpandDims"
  input: "MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/shift/forward/add"
  input: "ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "Shape_1"
  op: "Shape"
  input: "Pad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_4/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_4"
  op: "StridedSlice"
  input: "Shape_1"
  input: "strided_slice_4/stack"
  input: "strided_slice_4/stack_1"
  input: "strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Tile/multiples/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Tile/multiples/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Tile/multiples"
  op: "Pack"
  input: "Tile/multiples/0"
  input: "strided_slice_4"
  input: "Tile/multiples/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Tile"
  op: "Tile"
  input: "ExpandDims"
  input: "Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "Shape_2"
  op: "Shape"
  input: "Pad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_5/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_5"
  op: "StridedSlice"
  input: "Shape_2"
  input: "strided_slice_5/stack"
  input: "strided_slice_5/stack_1"
  input: "strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "zeros/packed/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "zeros/packed/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "zeros/packed"
  op: "Pack"
  input: "zeros/packed/0"
  input: "strided_slice_5"
  input: "zeros/packed/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zeros"
  op: "Fill"
  input: "zeros/packed"
  input: "zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Shape_3"
  op: "Shape"
  input: "Pad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_6/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_6"
  op: "StridedSlice"
  input: "Shape_3"
  input: "strided_slice_6/stack"
  input: "strided_slice_6/stack_1"
  input: "strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "zeros_1/packed/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "zeros_1/packed/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "zeros_1/packed"
  op: "Pack"
  input: "zeros_1/packed/0"
  input: "strided_slice_6"
  input: "zeros_1/packed/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Fill"
  input: "zeros_1/packed"
  input: "zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "zeros_1"
  input: "Tile"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/concat"
  op: "ConcatV2"
  input: "Pad"
  input: "concat_1"
  input: "ScheduledOutputTrainingHelper/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/range"
  op: "Range"
  input: "ScheduledOutputTrainingHelper/range/start"
  input: "ScheduledOutputTrainingHelper/Rank"
  input: "ScheduledOutputTrainingHelper/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/concat_1/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/concat_1"
  op: "ConcatV2"
  input: "ScheduledOutputTrainingHelper/concat_1/values_0"
  input: "ScheduledOutputTrainingHelper/range"
  input: "ScheduledOutputTrainingHelper/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/transpose"
  op: "Transpose"
  input: "concat_1"
  input: "ScheduledOutputTrainingHelper/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/Shape"
  op: "Shape"
  input: "ScheduledOutputTrainingHelper/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/strided_slice"
  op: "StridedSlice"
  input: "ScheduledOutputTrainingHelper/Shape"
  input: "ScheduledOutputTrainingHelper/strided_slice/stack"
  input: "ScheduledOutputTrainingHelper/strided_slice/stack_1"
  input: "ScheduledOutputTrainingHelper/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TensorArray"
  op: "TensorArrayV3"
  input: "ScheduledOutputTrainingHelper/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "ScheduledOutputTrainingHelper/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "ScheduledOutputTrainingHelper/TensorArrayUnstack/Shape"
  input: "ScheduledOutputTrainingHelper/TensorArrayUnstack/strided_slice/stack"
  input: "ScheduledOutputTrainingHelper/TensorArrayUnstack/strided_slice/stack_1"
  input: "ScheduledOutputTrainingHelper/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TensorArrayUnstack/range"
  op: "Range"
  input: "ScheduledOutputTrainingHelper/TensorArrayUnstack/range/start"
  input: "ScheduledOutputTrainingHelper/TensorArrayUnstack/strided_slice"
  input: "ScheduledOutputTrainingHelper/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "ScheduledOutputTrainingHelper/TensorArray"
  input: "ScheduledOutputTrainingHelper/TensorArrayUnstack/range"
  input: "ScheduledOutputTrainingHelper/transpose"
  input: "ScheduledOutputTrainingHelper/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ScheduledOutputTrainingHelper/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/range"
  op: "Range"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/range/start"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/Rank"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/concat"
  op: "ConcatV2"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/concat/values_0"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/range"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/transpose"
  op: "Transpose"
  input: "ScheduledOutputTrainingHelper/concat"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/Shape"
  op: "Shape"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/strided_slice"
  op: "StridedSlice"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/Shape"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/strided_slice/stack"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/strided_slice/stack_1"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArray"
  op: "TensorArrayV3"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 346
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/Shape"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/strided_slice/stack"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/strided_slice/stack_1"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/range"
  op: "Range"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/range/start"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/strided_slice"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArray"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/range"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/transpose"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ScheduledOutputTrainingHelper/TrainingHelper/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/strided_slice_1"
  op: "StridedSlice"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/transpose"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/strided_slice_1/stack"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/strided_slice_1/stack_1"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/zeros_like/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000Z\001\000\000"
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/zeros_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/zeros_like"
  op: "Fill"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/zeros_like/shape_as_tensor"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ScheduledOutputTrainingHelper/TrainingHelper/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat"
  op: "ConcatV2"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_1"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros"
  op: "Fill"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat_1"
  op: "ConcatV2"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_4"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_5"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros_1"
  op: "Fill"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/concat_1"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMBlockCellZeroState/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/concat"
  op: "ConcatV2"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/Const"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/Const_1"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/zeros"
  op: "Fill"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/concat"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/concat_1"
  op: "ConcatV2"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/Const_4"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/Const_5"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/zeros_1"
  op: "Fill"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/concat_1"
  input: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMBlockCellZeroState/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "decoder/z_to_initial_state/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "decoder/z_to_initial_state/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "decoder/z_to_initial_state/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Initializer/random_normal"
  op: "AddV2"
  input: "decoder/z_to_initial_state/kernel/Initializer/random_normal/mul"
  input: "decoder/z_to_initial_state/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Assign"
  op: "Assign"
  input: "decoder/z_to_initial_state/kernel"
  input: "decoder/z_to_initial_state/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/read"
  op: "Identity"
  input: "decoder/z_to_initial_state/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias/Initializer/zeros"
  op: "Fill"
  input: "decoder/z_to_initial_state/bias/Initializer/zeros/shape_as_tensor"
  input: "decoder/z_to_initial_state/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias/Assign"
  op: "Assign"
  input: "decoder/z_to_initial_state/bias"
  input: "decoder/z_to_initial_state/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias/read"
  op: "Identity"
  input: "decoder/z_to_initial_state/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/MatMul"
  op: "MatMul"
  input: "MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/shift/forward/add"
  input: "decoder/z_to_initial_state/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/z_to_initial_state/BiasAdd"
  op: "BiasAdd"
  input: "decoder/z_to_initial_state/MatMul"
  input: "decoder/z_to_initial_state/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/z_to_initial_state/Tanh"
  op: "Tanh"
  input: "decoder/z_to_initial_state/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "Const_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "split/split_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "split"
  op: "SplitV"
  input: "decoder/z_to_initial_state/Tanh"
  input: "Const_10"
  input: "split/split_dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "decoder/TrainingHelperInitialize/Equal/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/TrainingHelperInitialize/Equal"
  op: "Equal"
  input: "decoder/TrainingHelperInitialize/Equal/x"
  input: "Minimum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/TrainingHelperInitialize/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/TrainingHelperInitialize/All"
  op: "All"
  input: "decoder/TrainingHelperInitialize/Equal"
  input: "decoder/TrainingHelperInitialize/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/TrainingHelperInitialize/cond/Switch"
  op: "Switch"
  input: "decoder/TrainingHelperInitialize/All"
  input: "decoder/TrainingHelperInitialize/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/TrainingHelperInitialize/cond/switch_t"
  op: "Identity"
  input: "decoder/TrainingHelperInitialize/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/TrainingHelperInitialize/cond/switch_f"
  op: "Identity"
  input: "decoder/TrainingHelperInitialize/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/TrainingHelperInitialize/cond/pred_id"
  op: "Identity"
  input: "decoder/TrainingHelperInitialize/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/TrainingHelperInitialize/cond/Switch_1"
  op: "Switch"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/zeros_like"
  input: "decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ScheduledOutputTrainingHelper/TrainingHelper/zeros_like"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/index"
  op: "Const"
  input: "^decoder/TrainingHelperInitialize/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/TrainingHelperInitialize/cond/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch"
  input: "decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/index"
  input: "decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch"
  op: "Switch"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArray"
  input: "decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ScheduledOutputTrainingHelper/TrainingHelper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  op: "Switch"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  input: "decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ScheduledOutputTrainingHelper/TrainingHelper/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/TrainingHelperInitialize/cond/Merge"
  op: "Merge"
  input: "decoder/TrainingHelperInitialize/cond/TensorArrayReadV3"
  input: "decoder/TrainingHelperInitialize/cond/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/ExpandDims"
  op: "ExpandDims"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/Size"
  input: "decoder/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 346
      }
    }
  }
}
node {
  name: "decoder/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/concat"
  op: "ConcatV2"
  input: "decoder/ExpandDims"
  input: "decoder/Const"
  input: "decoder/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/zeros"
  op: "Fill"
  input: "decoder/concat"
  input: "decoder/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/ExpandDims_1"
  op: "ExpandDims"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/Size"
  input: "decoder/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 346
      }
    }
  }
}
node {
  name: "decoder/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/ExpandDims_2"
  op: "ExpandDims"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/Size"
  input: "decoder/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "decoder/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/concat_1"
  op: "ConcatV2"
  input: "decoder/ExpandDims_2"
  input: "decoder/Const_2"
  input: "decoder/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/zeros_1"
  op: "Fill"
  input: "decoder/concat_1"
  input: "decoder/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/ExpandDims_3"
  op: "ExpandDims"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/Size"
  input: "decoder/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "decoder/ExpandDims_4/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/ExpandDims_4"
  op: "ExpandDims"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/Size"
  input: "decoder/ExpandDims_4/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/concat_2"
  op: "ConcatV2"
  input: "decoder/ExpandDims_4"
  input: "decoder/Const_4"
  input: "decoder/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/zeros_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/zeros_2"
  op: "Fill"
  input: "decoder/concat_2"
  input: "decoder/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/ExpandDims_5/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/ExpandDims_5"
  op: "ExpandDims"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/Size"
  input: "decoder/ExpandDims_5/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/zeros_like"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 32
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/TensorArray/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/TensorArray"
  op: "TensorArrayV3"
  input: "decoder/TensorArray/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 346
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/TensorArray_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/TensorArray_1"
  op: "TensorArrayV3"
  input: "decoder/TensorArray_1/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 90
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/TensorArray_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/TensorArray_2"
  op: "TensorArrayV3"
  input: "decoder/TensorArray_2/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/while/Enter"
  op: "Enter"
  input: "decoder/Const_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/Enter_1"
  op: "Enter"
  input: "decoder/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/Enter_2"
  op: "Enter"
  input: "decoder/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/Enter_3"
  op: "Enter"
  input: "decoder/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/Enter_4"
  op: "Enter"
  input: "split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/Enter_5"
  op: "Enter"
  input: "split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/Enter_6"
  op: "Enter"
  input: "split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/Enter_7"
  op: "Enter"
  input: "split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/Enter_8"
  op: "Enter"
  input: "decoder/TrainingHelperInitialize/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/Enter_9"
  op: "Enter"
  input: "decoder/TrainingHelperInitialize/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/Enter_10"
  op: "Enter"
  input: "decoder/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/Merge"
  op: "Merge"
  input: "decoder/while/Enter"
  input: "decoder/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Merge_1"
  op: "Merge"
  input: "decoder/while/Enter_1"
  input: "decoder/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Merge_2"
  op: "Merge"
  input: "decoder/while/Enter_2"
  input: "decoder/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Merge_3"
  op: "Merge"
  input: "decoder/while/Enter_3"
  input: "decoder/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Merge_4"
  op: "Merge"
  input: "decoder/while/Enter_4"
  input: "decoder/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Merge_5"
  op: "Merge"
  input: "decoder/while/Enter_5"
  input: "decoder/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Merge_6"
  op: "Merge"
  input: "decoder/while/Enter_6"
  input: "decoder/while/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Merge_7"
  op: "Merge"
  input: "decoder/while/Enter_7"
  input: "decoder/while/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Merge_8"
  op: "Merge"
  input: "decoder/while/Enter_8"
  input: "decoder/while/NextIteration_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Merge_9"
  op: "Merge"
  input: "decoder/while/Enter_9"
  input: "decoder/while/NextIteration_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Merge_10"
  op: "Merge"
  input: "decoder/while/Enter_10"
  input: "decoder/while/NextIteration_10"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Const"
  op: "Const"
  input: "^decoder/while/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/while/All"
  op: "All"
  input: "decoder/while/Merge_9"
  input: "decoder/while/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/while/LogicalNot"
  op: "LogicalNot"
  input: "decoder/while/All"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/LoopCond"
  op: "LoopCond"
  input: "decoder/while/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Switch"
  op: "Switch"
  input: "decoder/while/Merge"
  input: "decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Switch_1"
  op: "Switch"
  input: "decoder/while/Merge_1"
  input: "decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Switch_2"
  op: "Switch"
  input: "decoder/while/Merge_2"
  input: "decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Switch_3"
  op: "Switch"
  input: "decoder/while/Merge_3"
  input: "decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Switch_4"
  op: "Switch"
  input: "decoder/while/Merge_4"
  input: "decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Switch_5"
  op: "Switch"
  input: "decoder/while/Merge_5"
  input: "decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Switch_6"
  op: "Switch"
  input: "decoder/while/Merge_6"
  input: "decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Merge_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Switch_7"
  op: "Switch"
  input: "decoder/while/Merge_7"
  input: "decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Merge_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Switch_8"
  op: "Switch"
  input: "decoder/while/Merge_8"
  input: "decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Merge_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Switch_9"
  op: "Switch"
  input: "decoder/while/Merge_9"
  input: "decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Merge_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Switch_10"
  op: "Switch"
  input: "decoder/while/Merge_10"
  input: "decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Merge_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Identity"
  op: "Identity"
  input: "decoder/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Identity_1"
  op: "Identity"
  input: "decoder/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Identity_2"
  op: "Identity"
  input: "decoder/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Identity_3"
  op: "Identity"
  input: "decoder/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Identity_4"
  op: "Identity"
  input: "decoder/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Identity_5"
  op: "Identity"
  input: "decoder/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Identity_6"
  op: "Identity"
  input: "decoder/while/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Identity_7"
  op: "Identity"
  input: "decoder/while/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Identity_8"
  op: "Identity"
  input: "decoder/while/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Identity_9"
  op: "Identity"
  input: "decoder/while/Switch_9:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Identity_10"
  op: "Identity"
  input: "decoder/while/Switch_10:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "Z\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06074567511677742
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06074567511677742
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 602
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  op: "Identity"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Assign"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/read"
  op: "Identity"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/zeros"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
  op: "LSTMBlockCell"
  input: "decoder/while/Identity_8"
  input: "decoder/while/Identity_4"
  input: "decoder/while/Identity_5"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/zeros"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/zeros"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/zeros"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "cell_clip"
    value {
      f: -1.0
    }
  }
  attr {
    key: "forget_bias"
    value {
      f: 1.0
    }
  }
  attr {
    key: "use_peephole"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter"
  op: "Enter"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1"
  op: "Enter"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0625
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0625
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/read"
  op: "Identity"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Assign"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/read"
  op: "Identity"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/zeros"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell"
  op: "LSTMBlockCell"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:6"
  input: "decoder/while/Identity_6"
  input: "decoder/while/Identity_7"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/zeros"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/zeros"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/zeros"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "cell_clip"
    value {
      f: -1.0
    }
  }
  attr {
    key: "forget_bias"
    value {
      f: 1.0
    }
  }
  attr {
    key: "use_peephole"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter"
  op: "Enter"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1"
  op: "Enter"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.13168539106845856
      }
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.13168539106845856
      }
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/output_projection/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/output_projection/kernel/Initializer/random_uniform/max"
  input: "decoder/output_projection/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/output_projection/kernel/Initializer/random_uniform/RandomUniform"
  input: "decoder/output_projection/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "decoder/output_projection/kernel/Initializer/random_uniform/mul"
  input: "decoder/output_projection/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "decoder/output_projection/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 90
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Assign"
  op: "Assign"
  input: "decoder/output_projection/kernel"
  input: "decoder/output_projection/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/output_projection/kernel/read"
  op: "Identity"
  input: "decoder/output_projection/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "decoder/output_projection/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 90
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/output_projection/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 90
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/output_projection/bias/Assign"
  op: "Assign"
  input: "decoder/output_projection/bias"
  input: "decoder/output_projection/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/output_projection/bias/read"
  op: "Identity"
  input: "decoder/output_projection/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/output_projection/MatMul"
  op: "MatMul"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell:6"
  input: "decoder/while/BasicDecoderStep/output_projection/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/output_projection/MatMul/Enter"
  op: "Enter"
  input: "decoder/output_projection/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/output_projection/BiasAdd"
  op: "BiasAdd"
  input: "decoder/while/BasicDecoderStep/output_projection/MatMul"
  input: "decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter"
  op: "Enter"
  input: "decoder/output_projection/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/Shape"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Rank"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Equal/y"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Equal"
  op: "Equal"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Rank"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Cast"
  op: "Cast"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Shape"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/PadV2/paddings/0/1"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/PadV2/paddings/0"
  op: "Pack"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Cast"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/PadV2/paddings/0/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/PadV2/paddings"
  op: "Pack"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/PadV2/paddings/0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/PadV2/constant_values"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/PadV2"
  op: "PadV2"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Shape"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/PadV2/paddings"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/PadV2/constant_values"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Reshape"
  op: "Reshape"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Reshape/Enter"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/PadV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Reshape/Enter"
  op: "Enter"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Const"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Prod"
  op: "Prod"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Reshape"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/concat/values_0"
  op: "Pack"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Prod"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/concat/axis"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/concat"
  op: "ConcatV2"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/concat/values_0"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/Shape"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Less"
  op: "Less"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/random_uniform/RandomUniform"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Less/Enter"
  op: "Enter"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Cast_1"
  op: "Cast"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Less"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Shape_1"
  op: "Shape"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/strided_slice/stack"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/strided_slice/stack_1"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/strided_slice/stack_2"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/strided_slice"
  op: "StridedSlice"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Shape_1"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/strided_slice/stack"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/strided_slice/stack_1"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/concat_1/axis"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/concat_1"
  op: "ConcatV2"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Reshape"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/strided_slice"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Reshape_1"
  op: "Reshape"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Cast_1"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/add/y"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/add"
  op: "AddV2"
  input: "decoder/while/Identity"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/GreaterEqual"
  op: "GreaterEqual"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/add"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/GreaterEqual/Enter"
  op: "Enter"
  input: "Minimum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/Const"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/All"
  op: "All"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/GreaterEqual"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Switch"
  op: "Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/All"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/switch_t"
  op: "Identity"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/switch_f"
  op: "Identity"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/pred_id"
  op: "Identity"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Enter"
  op: "Enter"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Switch_1"
  op: "Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Enter"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch"
  op: "Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1"
  op: "Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/add"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2"
  op: "Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge"
  op: "Merge"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/Cast"
  op: "Cast"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Reshape_1"
  attr {
    key: "DstT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/Const"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/All"
  op: "All"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/GreaterEqual"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/Const_1"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/Any"
  op: "Any"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/Cast"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/LogicalNot"
  op: "LogicalNot"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/Any"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/LogicalOr"
  op: "LogicalOr"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/All"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Switch"
  op: "Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/LogicalOr"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/LogicalOr"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_t"
  op: "Identity"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  op: "Identity"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/pred_id"
  op: "Identity"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/LogicalOr"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Switch_1"
  op: "Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Where"
  op: "Where"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Where/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Where/Switch"
  op: "Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/Cast"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Cast"
  op: "Cast"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Where"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/LogicalNot"
  op: "LogicalNot"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Where/Switch"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Where_1"
  op: "Where"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/LogicalNot"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Cast_1"
  op: "Cast"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Where_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd"
  op: "GatherNd"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd/Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Cast"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd/Switch"
  op: "Switch"
  input: "decoder/while/BasicDecoderStep/output_projection/BiasAdd"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/output_projection/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1"
  op: "GatherNd"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Cast_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch"
  op: "Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/truediv/y"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/truediv"
  op: "RealDiv"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/sample_shape"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Identity"
  op: "Identity"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Shape"
  op: "Shape"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/concat/values_0"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/concat/axis"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/concat"
  op: "ConcatV2"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/concat/values_0"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Shape"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/categorical/sanitize_seed/seed/shape"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/categorical/sanitize_seed/seed/min"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -2147483648
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/categorical/sanitize_seed/seed/max"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2147483647
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/categorical/sanitize_seed/seed"
  op: "RandomUniformInt"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/categorical/sanitize_seed/seed/shape"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/categorical/sanitize_seed/seed/min"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/categorical/sanitize_seed/seed/max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/categorical/stateless_categorical/StatelessMultinomial/num_samples"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/categorical/stateless_categorical/StatelessMultinomial"
  op: "StatelessMultinomial"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Identity"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/categorical/stateless_categorical/StatelessMultinomial/num_samples"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/categorical/sanitize_seed/seed"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/transpose/perm"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/transpose"
  op: "Transpose"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/categorical/stateless_categorical/StatelessMultinomial"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/one_hot/on_value"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/one_hot/off_value"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/one_hot/depth"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/one_hot"
  op: "OneHot"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/transpose"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/one_hot/depth"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/one_hot/on_value"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Reshape"
  op: "Reshape"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/one_hot"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Shape_1"
  op: "Shape"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/strided_slice/stack"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/strided_slice/stack_1"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/strided_slice/stack_2"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/strided_slice"
  op: "StridedSlice"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Shape_1"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/strided_slice/stack"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/strided_slice/stack_1"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/concat_1/axis"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/concat_1"
  op: "ConcatV2"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/sample_shape"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/strided_slice"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Reshape_1"
  op: "Reshape"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Reshape"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add/y"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add"
  op: "AddV2"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add/Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add/Switch"
  op: "Switch"
  input: "decoder/while/Identity"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "ScheduledOutputTrainingHelper/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Switch"
  op: "Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1"
  op: "Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_2"
  op: "GatherNd"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Cast"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat/axis"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat"
  op: "ConcatV2"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Reshape_1"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_2"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Shape"
  op: "Const"
  input: "^decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000Z\001\000\000"
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd"
  op: "ScatterNd"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Cast"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1"
  op: "ScatterNd"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Cast_1"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add_1"
  op: "AddV2"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge"
  op: "Merge"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add_1"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/LogicalOr"
  op: "LogicalOr"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/GreaterEqual"
  input: "decoder/while/Identity_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/LogicalNot_1"
  op: "LogicalNot"
  input: "decoder/while/Identity_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Shape"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "decoder/while/add/y"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/while/add"
  op: "AddV2"
  input: "decoder/while/Identity"
  input: "decoder/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Fill"
  op: "Fill"
  input: "decoder/while/Shape"
  input: "decoder/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/while/Select"
  op: "Select"
  input: "decoder/while/LogicalNot_1"
  input: "decoder/while/Fill"
  input: "decoder/while/Identity_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "decoder/while/Identity"
  input: "decoder/while/Identity_8"
  input: "decoder/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Identity_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "decoder/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Identity_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "decoder/while/Identity"
  input: "decoder/while/BasicDecoderStep/output_projection/BiasAdd"
  input: "decoder/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/output_projection/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "decoder/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/output_projection/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/TensorArrayWrite_2/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "decoder/while/TensorArrayWrite_2/TensorArrayWriteV3/Enter"
  input: "decoder/while/Identity"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Reshape_1"
  input: "decoder/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/TensorArrayWrite_2/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "decoder/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperSample/call_sampler/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/while/add_1/y"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/while/add_1"
  op: "AddV2"
  input: "decoder/while/Identity"
  input: "decoder/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/NextIteration"
  op: "NextIteration"
  input: "decoder/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/NextIteration_1"
  op: "NextIteration"
  input: "decoder/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/NextIteration_2"
  op: "NextIteration"
  input: "decoder/while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/NextIteration_3"
  op: "NextIteration"
  input: "decoder/while/TensorArrayWrite_2/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/NextIteration_4"
  op: "NextIteration"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/NextIteration_5"
  op: "NextIteration"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/NextIteration_6"
  op: "NextIteration"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/NextIteration_7"
  op: "NextIteration"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/NextIteration_8"
  op: "NextIteration"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/NextIteration_9"
  op: "NextIteration"
  input: "decoder/while/LogicalOr"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/NextIteration_10"
  op: "NextIteration"
  input: "decoder/while/Select"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Exit"
  op: "Exit"
  input: "decoder/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Exit_1"
  op: "Exit"
  input: "decoder/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Exit_2"
  op: "Exit"
  input: "decoder/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Exit_3"
  op: "Exit"
  input: "decoder/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/while/Exit_4"
  op: "Exit"
  input: "decoder/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Exit_5"
  op: "Exit"
  input: "decoder/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Exit_6"
  op: "Exit"
  input: "decoder/while/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Exit_7"
  op: "Exit"
  input: "decoder/while/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Exit_8"
  op: "Exit"
  input: "decoder/while/Switch_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Exit_9"
  op: "Exit"
  input: "decoder/while/Switch_9"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "decoder/while/Exit_10"
  op: "Exit"
  input: "decoder/while/Switch_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "decoder/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "decoder/TensorArray"
  input: "decoder/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/TensorArrayStack/range"
  op: "Range"
  input: "decoder/TensorArrayStack/range/start"
  input: "decoder/TensorArrayStack/TensorArraySizeV3"
  input: "decoder/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "decoder/TensorArray"
  input: "decoder/TensorArrayStack/range"
  input: "decoder/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 346
        }
      }
    }
  }
}
node {
  name: "decoder/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "decoder/TensorArray_1"
  input: "decoder/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/TensorArrayStack_1/range"
  op: "Range"
  input: "decoder/TensorArrayStack_1/range/start"
  input: "decoder/TensorArrayStack_1/TensorArraySizeV3"
  input: "decoder/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "decoder/TensorArray_1"
  input: "decoder/TensorArrayStack_1/range"
  input: "decoder/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 90
        }
      }
    }
  }
}
node {
  name: "decoder/TensorArrayStack_2/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "decoder/TensorArray_2"
  input: "decoder/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/TensorArrayStack_2/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/TensorArrayStack_2/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/TensorArrayStack_2/range"
  op: "Range"
  input: "decoder/TensorArrayStack_2/range/start"
  input: "decoder/TensorArrayStack_2/TensorArraySizeV3"
  input: "decoder/TensorArrayStack_2/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/TensorArrayStack_2/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "decoder/TensorArray_2"
  input: "decoder/TensorArrayStack_2/range"
  input: "decoder/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/TensorArray_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "decoder/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decoder/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/range"
  op: "Range"
  input: "decoder/range/start"
  input: "decoder/Rank"
  input: "decoder/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/concat_3/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/concat_3/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/concat_3"
  op: "ConcatV2"
  input: "decoder/concat_3/values_0"
  input: "decoder/range"
  input: "decoder/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decoder/transpose"
  op: "Transpose"
  input: "decoder/TensorArrayStack/TensorArrayGatherV3"
  input: "decoder/concat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "decoder/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decoder/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/range_1"
  op: "Range"
  input: "decoder/range_1/start"
  input: "decoder/Rank_1"
  input: "decoder/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/concat_4/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/concat_4/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/concat_4"
  op: "ConcatV2"
  input: "decoder/concat_4/values_0"
  input: "decoder/range_1"
  input: "decoder/concat_4/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decoder/transpose_1"
  op: "Transpose"
  input: "decoder/TensorArrayStack_1/TensorArrayGatherV3"
  input: "decoder/concat_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "decoder/Rank_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/range_2/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/range_2/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/range_2"
  op: "Range"
  input: "decoder/range_2/start"
  input: "decoder/Rank_2"
  input: "decoder/range_2/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decoder/concat_5/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/concat_5/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/concat_5"
  op: "ConcatV2"
  input: "decoder/concat_5/values_0"
  input: "decoder/range_2"
  input: "decoder/concat_5/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/transpose_2"
  op: "Transpose"
  input: "decoder/TensorArrayStack_2/TensorArrayGatherV3"
  input: "decoder/concat_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "strided_slice_7/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_7"
  op: "StridedSlice"
  input: "decoder/transpose"
  input: "strided_slice_7/stack"
  input: "strided_slice_7/stack_1"
  input: "strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 7
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Min"
  op: "Min"
  input: "Minimum_1"
  input: "Const_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Shape_4"
  op: "Shape"
  input: "strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_8/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_8"
  op: "StridedSlice"
  input: "Shape_4"
  input: "strided_slice_8/stack"
  input: "strided_slice_8/stack_1"
  input: "strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "Min"
  input: "strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_t"
  op: "Identity"
  input: "cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_f"
  op: "Identity"
  input: "cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Reshape/shape"
  op: "Const"
  input: "^cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377Z\000\000\000"
      }
    }
  }
}
node {
  name: "cond/Reshape"
  op: "Reshape"
  input: "cond/Reshape/Switch:1"
  input: "cond/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "cond/Reshape/Switch"
  op: "Switch"
  input: "strided_slice_2"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@strided_slice_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "cond/SequenceMask/Const"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/SequenceMask/Max"
  op: "Max"
  input: "cond/SequenceMask/Max/Switch"
  input: "cond/SequenceMask/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond/SequenceMask/Max/Switch"
  op: "Switch"
  input: "Minimum_1"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Minimum_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "cond/SequenceMask/Const_1"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/SequenceMask/Maximum"
  op: "Maximum"
  input: "cond/SequenceMask/Const_1"
  input: "cond/SequenceMask/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/SequenceMask/Const_2"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond/SequenceMask/Const_3"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond/SequenceMask/Range"
  op: "Range"
  input: "cond/SequenceMask/Const_2"
  input: "cond/SequenceMask/Maximum"
  input: "cond/SequenceMask/Const_3"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/SequenceMask/ExpandDims/dim"
  op: "Const"
  input: "^cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "cond/SequenceMask/Max/Switch"
  input: "cond/SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/SequenceMask/Cast"
  op: "Cast"
  input: "cond/SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/SequenceMask/Less"
  op: "Less"
  input: "cond/SequenceMask/Range"
  input: "cond/SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond/Where"
  op: "Where"
  input: "cond/SequenceMask/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "cond/GatherNd"
  op: "GatherNd"
  input: "cond/GatherNd/Switch"
  input: "cond/Where"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "cond/GatherNd/Switch"
  op: "Switch"
  input: "strided_slice_2"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@strided_slice_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "cond/Merge"
  op: "Merge"
  input: "cond/GatherNd"
  input: "cond/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Const_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Min_1"
  op: "Min"
  input: "Minimum_1"
  input: "Const_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Shape_5"
  op: "Shape"
  input: "decoder/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_9/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_9"
  op: "StridedSlice"
  input: "Shape_5"
  input: "strided_slice_9/stack"
  input: "strided_slice_9/stack_1"
  input: "strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Equal_1"
  op: "Equal"
  input: "Min_1"
  input: "strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "cond_1/Switch"
  op: "Switch"
  input: "Equal_1"
  input: "Equal_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/switch_t"
  op: "Identity"
  input: "cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/switch_f"
  op: "Identity"
  input: "cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/pred_id"
  op: "Identity"
  input: "Equal_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/Reshape/shape"
  op: "Const"
  input: "^cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377Z\000\000\000"
      }
    }
  }
}
node {
  name: "cond_1/Reshape"
  op: "Reshape"
  input: "cond_1/Reshape/Switch:1"
  input: "cond_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Reshape/Switch"
  op: "Switch"
  input: "decoder/transpose_1"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/transpose_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Const"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Max"
  op: "Max"
  input: "cond_1/SequenceMask/Max/Switch"
  input: "cond_1/SequenceMask/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cond_1/SequenceMask/Max/Switch"
  op: "Switch"
  input: "Minimum_1"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Minimum_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Const_1"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Maximum"
  op: "Maximum"
  input: "cond_1/SequenceMask/Const_1"
  input: "cond_1/SequenceMask/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Const_2"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Const_3"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Range"
  op: "Range"
  input: "cond_1/SequenceMask/Const_2"
  input: "cond_1/SequenceMask/Maximum"
  input: "cond_1/SequenceMask/Const_3"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/ExpandDims/dim"
  op: "Const"
  input: "^cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "cond_1/SequenceMask/Max/Switch"
  input: "cond_1/SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Cast"
  op: "Cast"
  input: "cond_1/SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/SequenceMask/Less"
  op: "Less"
  input: "cond_1/SequenceMask/Range"
  input: "cond_1/SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Where"
  op: "Where"
  input: "cond_1/SequenceMask/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/GatherNd"
  op: "GatherNd"
  input: "cond_1/GatherNd/Switch"
  input: "cond_1/Where"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/GatherNd/Switch"
  op: "Switch"
  input: "decoder/transpose_1"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/transpose_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "cond_1/Merge"
  op: "Merge"
  input: "cond_1/GatherNd"
  input: "cond_1/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "ArgMax/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax"
  op: "ArgMax"
  input: "cond/Merge"
  input: "ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax_1"
  op: "ArgMax"
  input: "cond_1/Merge"
  input: "ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/labels_stop_gradient"
  op: "StopGradient"
  input: "cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Shape"
  op: "Shape"
  input: "cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Shape_1"
  op: "Shape"
  input: "cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Sub"
  op: "Sub"
  input: "softmax_cross_entropy_with_logits_sg/Rank_1"
  input: "softmax_cross_entropy_with_logits_sg/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice/begin"
  op: "Pack"
  input: "softmax_cross_entropy_with_logits_sg/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice"
  op: "Slice"
  input: "softmax_cross_entropy_with_logits_sg/Shape_1"
  input: "softmax_cross_entropy_with_logits_sg/Slice/begin"
  input: "softmax_cross_entropy_with_logits_sg/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/concat"
  op: "ConcatV2"
  input: "softmax_cross_entropy_with_logits_sg/concat/values_0"
  input: "softmax_cross_entropy_with_logits_sg/Slice"
  input: "softmax_cross_entropy_with_logits_sg/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Reshape"
  op: "Reshape"
  input: "cond_1/Merge"
  input: "softmax_cross_entropy_with_logits_sg/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Rank_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Shape_2"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/labels_stop_gradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Sub_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Sub_1"
  op: "Sub"
  input: "softmax_cross_entropy_with_logits_sg/Rank_2"
  input: "softmax_cross_entropy_with_logits_sg/Sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice_1/begin"
  op: "Pack"
  input: "softmax_cross_entropy_with_logits_sg/Sub_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice_1"
  op: "Slice"
  input: "softmax_cross_entropy_with_logits_sg/Shape_2"
  input: "softmax_cross_entropy_with_logits_sg/Slice_1/begin"
  input: "softmax_cross_entropy_with_logits_sg/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/concat_1/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/concat_1"
  op: "ConcatV2"
  input: "softmax_cross_entropy_with_logits_sg/concat_1/values_0"
  input: "softmax_cross_entropy_with_logits_sg/Slice_1"
  input: "softmax_cross_entropy_with_logits_sg/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Reshape_1"
  op: "Reshape"
  input: "softmax_cross_entropy_with_logits_sg/labels_stop_gradient"
  input: "softmax_cross_entropy_with_logits_sg/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg"
  op: "SoftmaxCrossEntropyWithLogits"
  input: "softmax_cross_entropy_with_logits_sg/Reshape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Sub_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Sub_2"
  op: "Sub"
  input: "softmax_cross_entropy_with_logits_sg/Rank"
  input: "softmax_cross_entropy_with_logits_sg/Sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice_2/size"
  op: "Pack"
  input: "softmax_cross_entropy_with_logits_sg/Sub_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Slice_2"
  op: "Slice"
  input: "softmax_cross_entropy_with_logits_sg/Shape"
  input: "softmax_cross_entropy_with_logits_sg/Slice_2/begin"
  input: "softmax_cross_entropy_with_logits_sg/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  op: "Reshape"
  input: "softmax_cross_entropy_with_logits_sg"
  input: "softmax_cross_entropy_with_logits_sg/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Equal_2"
  op: "Equal"
  input: "ArgMax_1"
  input: "ArgMax"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "Equal_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/total/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/total"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "accuracy/total/Assign"
  op: "Assign"
  input: "accuracy/total"
  input: "accuracy/total/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "accuracy/total/read"
  op: "Identity"
  input: "accuracy/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "accuracy/count/Assign"
  op: "Assign"
  input: "accuracy/count"
  input: "accuracy/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "accuracy/count/read"
  op: "Identity"
  input: "accuracy/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/Size"
  op: "Size"
  input: "Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "accuracy/Cast"
  op: "Cast"
  input: "accuracy/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "accuracy/Sum"
  op: "Sum"
  input: "Cast"
  input: "accuracy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/AssignAdd"
  op: "AssignAdd"
  input: "accuracy/total"
  input: "accuracy/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/AssignAdd_1"
  op: "AssignAdd"
  input: "accuracy/count"
  input: "accuracy/Cast"
  input: "^Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/Maximum"
  op: "Maximum"
  input: "accuracy/count/read"
  input: "accuracy/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/value"
  op: "DivNoNan"
  input: "accuracy/total/read"
  input: "accuracy/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/Maximum_1"
  op: "Maximum"
  input: "accuracy/AssignAdd_1"
  input: "accuracy/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/update_op"
  op: "DivNoNan"
  input: "accuracy/AssignAdd"
  input: "accuracy/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mean_accuracy/total/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean_accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 90
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean_accuracy/total"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean_accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 90
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mean_accuracy/total/Assign"
  op: "Assign"
  input: "mean_accuracy/total"
  input: "mean_accuracy/total/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean_accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mean_accuracy/total/read"
  op: "Identity"
  input: "mean_accuracy/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean_accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "mean_accuracy/count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean_accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 90
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean_accuracy/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean_accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 90
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "mean_accuracy/count/Assign"
  op: "Assign"
  input: "mean_accuracy/count"
  input: "mean_accuracy/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean_accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mean_accuracy/count/read"
  op: "Identity"
  input: "mean_accuracy/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean_accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "mean_accuracy/Size"
  op: "Size"
  input: "ArgMax"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_accuracy/ones/packed"
  op: "Pack"
  input: "mean_accuracy/Size"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "mean_accuracy/ones/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mean_accuracy/ones"
  op: "Fill"
  input: "mean_accuracy/ones/packed"
  input: "mean_accuracy/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_accuracy/Equal"
  op: "Equal"
  input: "ArgMax_1"
  input: "ArgMax"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "mean_accuracy/Cast"
  op: "Cast"
  input: "mean_accuracy/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "mean_accuracy/ScatterAdd"
  op: "ScatterAdd"
  input: "mean_accuracy/total"
  input: "ArgMax"
  input: "mean_accuracy/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean_accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "mean_accuracy/ScatterAdd_1"
  op: "ScatterAdd"
  input: "mean_accuracy/count"
  input: "ArgMax"
  input: "mean_accuracy/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean_accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "mean_accuracy/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean_accuracy/Maximum"
  op: "Maximum"
  input: "mean_accuracy/total/read"
  input: "mean_accuracy/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "mean_accuracy/div_no_nan"
  op: "DivNoNan"
  input: "mean_accuracy/count/read"
  input: "mean_accuracy/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "mean_accuracy/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_accuracy/mean_accuracy"
  op: "Mean"
  input: "mean_accuracy/div_no_nan"
  input: "mean_accuracy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean_accuracy/Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean_accuracy/Maximum_1"
  op: "Maximum"
  input: "mean_accuracy/ScatterAdd"
  input: "mean_accuracy/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "mean_accuracy/update_op"
  op: "DivNoNan"
  input: "mean_accuracy/ScatterAdd_1"
  input: "mean_accuracy/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "Cumsum/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Cumsum"
  op: "Cumsum"
  input: "Minimum_1"
  input: "Cumsum/axis"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "exclusive"
    value {
      b: false
    }
  }
  attr {
    key: "reverse"
    value {
      b: false
    }
  }
}
node {
  name: "concat_2/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_2"
  op: "ConcatV2"
  input: "concat_2/values_0"
  input: "Cumsum"
  input: "concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
        }
      }
    }
  }
}
node {
  name: "strided_slice_10/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_10"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_10/stack"
  input: "strided_slice_10/stack_1"
  input: "strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_11/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_11"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_11/stack"
  input: "strided_slice_11/stack_1"
  input: "strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_13"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_12/stack"
  op: "Pack"
  input: "strided_slice_10"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_12/stack_1"
  op: "Pack"
  input: "strided_slice_11"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_12/stack_2"
  op: "Pack"
  input: "Const_13"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_12"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_12/stack"
  input: "strided_slice_12/stack_1"
  input: "strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_14"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum"
  op: "Sum"
  input: "strided_slice_12"
  input: "Const_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_13/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_13"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_13/stack"
  input: "strided_slice_13/stack_1"
  input: "strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_14/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_14/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_14/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_14"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_14/stack"
  input: "strided_slice_14/stack_1"
  input: "strided_slice_14/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_15"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_15/stack"
  op: "Pack"
  input: "strided_slice_13"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_15/stack_1"
  op: "Pack"
  input: "strided_slice_14"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_15/stack_2"
  op: "Pack"
  input: "Const_15"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_15"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_15/stack"
  input: "strided_slice_15/stack_1"
  input: "strided_slice_15/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_16"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_1"
  op: "Sum"
  input: "strided_slice_15"
  input: "Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_16/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_16/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_16/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_16"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_16/stack"
  input: "strided_slice_16/stack_1"
  input: "strided_slice_16/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_17/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_17/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice_17/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_17"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_17/stack"
  input: "strided_slice_17/stack_1"
  input: "strided_slice_17/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_17"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_18/stack"
  op: "Pack"
  input: "strided_slice_16"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_18/stack_1"
  op: "Pack"
  input: "strided_slice_17"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_18/stack_2"
  op: "Pack"
  input: "Const_17"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_18"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_18/stack"
  input: "strided_slice_18/stack_1"
  input: "strided_slice_18/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_18"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_2"
  op: "Sum"
  input: "strided_slice_18"
  input: "Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_19/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_19/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice_19/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_19"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_19/stack"
  input: "strided_slice_19/stack_1"
  input: "strided_slice_19/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_20/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice_20/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "strided_slice_20/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_20"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_20/stack"
  input: "strided_slice_20/stack_1"
  input: "strided_slice_20/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_19"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_21/stack"
  op: "Pack"
  input: "strided_slice_19"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_21/stack_1"
  op: "Pack"
  input: "strided_slice_20"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_21/stack_2"
  op: "Pack"
  input: "Const_19"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_21"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_21/stack"
  input: "strided_slice_21/stack_1"
  input: "strided_slice_21/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_20"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_3"
  op: "Sum"
  input: "strided_slice_21"
  input: "Const_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_22/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "strided_slice_22/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "strided_slice_22/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_22"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_22/stack"
  input: "strided_slice_22/stack_1"
  input: "strided_slice_22/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_23/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "strided_slice_23/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "strided_slice_23/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_23"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_23/stack"
  input: "strided_slice_23/stack_1"
  input: "strided_slice_23/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_21"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_24/stack"
  op: "Pack"
  input: "strided_slice_22"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_24/stack_1"
  op: "Pack"
  input: "strided_slice_23"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_24/stack_2"
  op: "Pack"
  input: "Const_21"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_24"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_24/stack"
  input: "strided_slice_24/stack_1"
  input: "strided_slice_24/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_22"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_4"
  op: "Sum"
  input: "strided_slice_24"
  input: "Const_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_25/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "strided_slice_25/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "strided_slice_25/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_25"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_25/stack"
  input: "strided_slice_25/stack_1"
  input: "strided_slice_25/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_26/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "strided_slice_26/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "strided_slice_26/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_26"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_26/stack"
  input: "strided_slice_26/stack_1"
  input: "strided_slice_26/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_23"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_27/stack"
  op: "Pack"
  input: "strided_slice_25"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_27/stack_1"
  op: "Pack"
  input: "strided_slice_26"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_27/stack_2"
  op: "Pack"
  input: "Const_23"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_27"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_27/stack"
  input: "strided_slice_27/stack_1"
  input: "strided_slice_27/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_24"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_5"
  op: "Sum"
  input: "strided_slice_27"
  input: "Const_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_28/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "strided_slice_28/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "strided_slice_28/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_28"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_28/stack"
  input: "strided_slice_28/stack_1"
  input: "strided_slice_28/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_29/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "strided_slice_29/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "strided_slice_29/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_29"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_29/stack"
  input: "strided_slice_29/stack_1"
  input: "strided_slice_29/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_25"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_30/stack"
  op: "Pack"
  input: "strided_slice_28"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_30/stack_1"
  op: "Pack"
  input: "strided_slice_29"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_30/stack_2"
  op: "Pack"
  input: "Const_25"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_30"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_30/stack"
  input: "strided_slice_30/stack_1"
  input: "strided_slice_30/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_26"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_6"
  op: "Sum"
  input: "strided_slice_30"
  input: "Const_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_31/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "strided_slice_31/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "strided_slice_31/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_31"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_31/stack"
  input: "strided_slice_31/stack_1"
  input: "strided_slice_31/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_32/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "strided_slice_32/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "strided_slice_32/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_32"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_32/stack"
  input: "strided_slice_32/stack_1"
  input: "strided_slice_32/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_27"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_33/stack"
  op: "Pack"
  input: "strided_slice_31"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_33/stack_1"
  op: "Pack"
  input: "strided_slice_32"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_33/stack_2"
  op: "Pack"
  input: "Const_27"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_33"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_33/stack"
  input: "strided_slice_33/stack_1"
  input: "strided_slice_33/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_28"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_7"
  op: "Sum"
  input: "strided_slice_33"
  input: "Const_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_34/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "strided_slice_34/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "strided_slice_34/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_34"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_34/stack"
  input: "strided_slice_34/stack_1"
  input: "strided_slice_34/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_35/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "strided_slice_35/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "strided_slice_35/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_35"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_35/stack"
  input: "strided_slice_35/stack_1"
  input: "strided_slice_35/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_29"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_36/stack"
  op: "Pack"
  input: "strided_slice_34"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_36/stack_1"
  op: "Pack"
  input: "strided_slice_35"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_36/stack_2"
  op: "Pack"
  input: "Const_29"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_36"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_36/stack"
  input: "strided_slice_36/stack_1"
  input: "strided_slice_36/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_30"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_8"
  op: "Sum"
  input: "strided_slice_36"
  input: "Const_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_37/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "strided_slice_37/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "strided_slice_37/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_37"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_37/stack"
  input: "strided_slice_37/stack_1"
  input: "strided_slice_37/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_38/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "strided_slice_38/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "strided_slice_38/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_38"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_38/stack"
  input: "strided_slice_38/stack_1"
  input: "strided_slice_38/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_31"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_39/stack"
  op: "Pack"
  input: "strided_slice_37"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_39/stack_1"
  op: "Pack"
  input: "strided_slice_38"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_39/stack_2"
  op: "Pack"
  input: "Const_31"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_39"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_39/stack"
  input: "strided_slice_39/stack_1"
  input: "strided_slice_39/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_32"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_9"
  op: "Sum"
  input: "strided_slice_39"
  input: "Const_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_40/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "strided_slice_40/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "strided_slice_40/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_40"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_40/stack"
  input: "strided_slice_40/stack_1"
  input: "strided_slice_40/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_41/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "strided_slice_41/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "strided_slice_41/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_41"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_41/stack"
  input: "strided_slice_41/stack_1"
  input: "strided_slice_41/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_33"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_42/stack"
  op: "Pack"
  input: "strided_slice_40"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_42/stack_1"
  op: "Pack"
  input: "strided_slice_41"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_42/stack_2"
  op: "Pack"
  input: "Const_33"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_42"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_42/stack"
  input: "strided_slice_42/stack_1"
  input: "strided_slice_42/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_34"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_10"
  op: "Sum"
  input: "strided_slice_42"
  input: "Const_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_43/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "strided_slice_43/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "strided_slice_43/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_43"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_43/stack"
  input: "strided_slice_43/stack_1"
  input: "strided_slice_43/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_44/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "strided_slice_44/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "strided_slice_44/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_44"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_44/stack"
  input: "strided_slice_44/stack_1"
  input: "strided_slice_44/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_35"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_45/stack"
  op: "Pack"
  input: "strided_slice_43"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_45/stack_1"
  op: "Pack"
  input: "strided_slice_44"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_45/stack_2"
  op: "Pack"
  input: "Const_35"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_45"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_45/stack"
  input: "strided_slice_45/stack_1"
  input: "strided_slice_45/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_36"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_11"
  op: "Sum"
  input: "strided_slice_45"
  input: "Const_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_46/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "strided_slice_46/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "strided_slice_46/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_46"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_46/stack"
  input: "strided_slice_46/stack_1"
  input: "strided_slice_46/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_47/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "strided_slice_47/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 14
      }
    }
  }
}
node {
  name: "strided_slice_47/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_47"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_47/stack"
  input: "strided_slice_47/stack_1"
  input: "strided_slice_47/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_37"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_48/stack"
  op: "Pack"
  input: "strided_slice_46"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_48/stack_1"
  op: "Pack"
  input: "strided_slice_47"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_48/stack_2"
  op: "Pack"
  input: "Const_37"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_48"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_48/stack"
  input: "strided_slice_48/stack_1"
  input: "strided_slice_48/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_38"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_12"
  op: "Sum"
  input: "strided_slice_48"
  input: "Const_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_49/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "strided_slice_49/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 14
      }
    }
  }
}
node {
  name: "strided_slice_49/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_49"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_49/stack"
  input: "strided_slice_49/stack_1"
  input: "strided_slice_49/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_50/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 14
      }
    }
  }
}
node {
  name: "strided_slice_50/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 15
      }
    }
  }
}
node {
  name: "strided_slice_50/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_50"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_50/stack"
  input: "strided_slice_50/stack_1"
  input: "strided_slice_50/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_39"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_51/stack"
  op: "Pack"
  input: "strided_slice_49"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_51/stack_1"
  op: "Pack"
  input: "strided_slice_50"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_51/stack_2"
  op: "Pack"
  input: "Const_39"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_51"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_51/stack"
  input: "strided_slice_51/stack_1"
  input: "strided_slice_51/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_40"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_13"
  op: "Sum"
  input: "strided_slice_51"
  input: "Const_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_52/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 14
      }
    }
  }
}
node {
  name: "strided_slice_52/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 15
      }
    }
  }
}
node {
  name: "strided_slice_52/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_52"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_52/stack"
  input: "strided_slice_52/stack_1"
  input: "strided_slice_52/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_53/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 15
      }
    }
  }
}
node {
  name: "strided_slice_53/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "strided_slice_53/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_53"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_53/stack"
  input: "strided_slice_53/stack_1"
  input: "strided_slice_53/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_41"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_54/stack"
  op: "Pack"
  input: "strided_slice_52"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_54/stack_1"
  op: "Pack"
  input: "strided_slice_53"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_54/stack_2"
  op: "Pack"
  input: "Const_41"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_54"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_54/stack"
  input: "strided_slice_54/stack_1"
  input: "strided_slice_54/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_42"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_14"
  op: "Sum"
  input: "strided_slice_54"
  input: "Const_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_55/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 15
      }
    }
  }
}
node {
  name: "strided_slice_55/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "strided_slice_55/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_55"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_55/stack"
  input: "strided_slice_55/stack_1"
  input: "strided_slice_55/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_56/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "strided_slice_56/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 17
      }
    }
  }
}
node {
  name: "strided_slice_56/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_56"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_56/stack"
  input: "strided_slice_56/stack_1"
  input: "strided_slice_56/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_43"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_57/stack"
  op: "Pack"
  input: "strided_slice_55"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_57/stack_1"
  op: "Pack"
  input: "strided_slice_56"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_57/stack_2"
  op: "Pack"
  input: "Const_43"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_57"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_57/stack"
  input: "strided_slice_57/stack_1"
  input: "strided_slice_57/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_44"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_15"
  op: "Sum"
  input: "strided_slice_57"
  input: "Const_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_58/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "strided_slice_58/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 17
      }
    }
  }
}
node {
  name: "strided_slice_58/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_58"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_58/stack"
  input: "strided_slice_58/stack_1"
  input: "strided_slice_58/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_59/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 17
      }
    }
  }
}
node {
  name: "strided_slice_59/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 18
      }
    }
  }
}
node {
  name: "strided_slice_59/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_59"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_59/stack"
  input: "strided_slice_59/stack_1"
  input: "strided_slice_59/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_45"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_60/stack"
  op: "Pack"
  input: "strided_slice_58"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_60/stack_1"
  op: "Pack"
  input: "strided_slice_59"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_60/stack_2"
  op: "Pack"
  input: "Const_45"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_60"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_60/stack"
  input: "strided_slice_60/stack_1"
  input: "strided_slice_60/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_46"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_16"
  op: "Sum"
  input: "strided_slice_60"
  input: "Const_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_61/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 17
      }
    }
  }
}
node {
  name: "strided_slice_61/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 18
      }
    }
  }
}
node {
  name: "strided_slice_61/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_61"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_61/stack"
  input: "strided_slice_61/stack_1"
  input: "strided_slice_61/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_62/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 18
      }
    }
  }
}
node {
  name: "strided_slice_62/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "strided_slice_62/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_62"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_62/stack"
  input: "strided_slice_62/stack_1"
  input: "strided_slice_62/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_47"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_63/stack"
  op: "Pack"
  input: "strided_slice_61"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_63/stack_1"
  op: "Pack"
  input: "strided_slice_62"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_63/stack_2"
  op: "Pack"
  input: "Const_47"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_63"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_63/stack"
  input: "strided_slice_63/stack_1"
  input: "strided_slice_63/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_48"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_17"
  op: "Sum"
  input: "strided_slice_63"
  input: "Const_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_64/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 18
      }
    }
  }
}
node {
  name: "strided_slice_64/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "strided_slice_64/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_64"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_64/stack"
  input: "strided_slice_64/stack_1"
  input: "strided_slice_64/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_65/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "strided_slice_65/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "strided_slice_65/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_65"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_65/stack"
  input: "strided_slice_65/stack_1"
  input: "strided_slice_65/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_49"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_66/stack"
  op: "Pack"
  input: "strided_slice_64"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_66/stack_1"
  op: "Pack"
  input: "strided_slice_65"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_66/stack_2"
  op: "Pack"
  input: "Const_49"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_66"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_66/stack"
  input: "strided_slice_66/stack_1"
  input: "strided_slice_66/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_50"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_18"
  op: "Sum"
  input: "strided_slice_66"
  input: "Const_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_67/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "strided_slice_67/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "strided_slice_67/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_67"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_67/stack"
  input: "strided_slice_67/stack_1"
  input: "strided_slice_67/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_68/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "strided_slice_68/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 21
      }
    }
  }
}
node {
  name: "strided_slice_68/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_68"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_68/stack"
  input: "strided_slice_68/stack_1"
  input: "strided_slice_68/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_51"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_69/stack"
  op: "Pack"
  input: "strided_slice_67"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_69/stack_1"
  op: "Pack"
  input: "strided_slice_68"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_69/stack_2"
  op: "Pack"
  input: "Const_51"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_69"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_69/stack"
  input: "strided_slice_69/stack_1"
  input: "strided_slice_69/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_52"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_19"
  op: "Sum"
  input: "strided_slice_69"
  input: "Const_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_70/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "strided_slice_70/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 21
      }
    }
  }
}
node {
  name: "strided_slice_70/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_70"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_70/stack"
  input: "strided_slice_70/stack_1"
  input: "strided_slice_70/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_71/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 21
      }
    }
  }
}
node {
  name: "strided_slice_71/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "strided_slice_71/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_71"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_71/stack"
  input: "strided_slice_71/stack_1"
  input: "strided_slice_71/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_53"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_72/stack"
  op: "Pack"
  input: "strided_slice_70"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_72/stack_1"
  op: "Pack"
  input: "strided_slice_71"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_72/stack_2"
  op: "Pack"
  input: "Const_53"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_72"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_72/stack"
  input: "strided_slice_72/stack_1"
  input: "strided_slice_72/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_54"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_20"
  op: "Sum"
  input: "strided_slice_72"
  input: "Const_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_73/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 21
      }
    }
  }
}
node {
  name: "strided_slice_73/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "strided_slice_73/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_73"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_73/stack"
  input: "strided_slice_73/stack_1"
  input: "strided_slice_73/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_74/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "strided_slice_74/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 23
      }
    }
  }
}
node {
  name: "strided_slice_74/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_74"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_74/stack"
  input: "strided_slice_74/stack_1"
  input: "strided_slice_74/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_55"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_75/stack"
  op: "Pack"
  input: "strided_slice_73"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_75/stack_1"
  op: "Pack"
  input: "strided_slice_74"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_75/stack_2"
  op: "Pack"
  input: "Const_55"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_75"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_75/stack"
  input: "strided_slice_75/stack_1"
  input: "strided_slice_75/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_56"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_21"
  op: "Sum"
  input: "strided_slice_75"
  input: "Const_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_76/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "strided_slice_76/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 23
      }
    }
  }
}
node {
  name: "strided_slice_76/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_76"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_76/stack"
  input: "strided_slice_76/stack_1"
  input: "strided_slice_76/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_77/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 23
      }
    }
  }
}
node {
  name: "strided_slice_77/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "strided_slice_77/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_77"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_77/stack"
  input: "strided_slice_77/stack_1"
  input: "strided_slice_77/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_57"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_78/stack"
  op: "Pack"
  input: "strided_slice_76"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_78/stack_1"
  op: "Pack"
  input: "strided_slice_77"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_78/stack_2"
  op: "Pack"
  input: "Const_57"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_78"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_78/stack"
  input: "strided_slice_78/stack_1"
  input: "strided_slice_78/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_58"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_22"
  op: "Sum"
  input: "strided_slice_78"
  input: "Const_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_79/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 23
      }
    }
  }
}
node {
  name: "strided_slice_79/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "strided_slice_79/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_79"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_79/stack"
  input: "strided_slice_79/stack_1"
  input: "strided_slice_79/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_80/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "strided_slice_80/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 25
      }
    }
  }
}
node {
  name: "strided_slice_80/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_80"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_80/stack"
  input: "strided_slice_80/stack_1"
  input: "strided_slice_80/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_59"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_81/stack"
  op: "Pack"
  input: "strided_slice_79"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_81/stack_1"
  op: "Pack"
  input: "strided_slice_80"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_81/stack_2"
  op: "Pack"
  input: "Const_59"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_81"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_81/stack"
  input: "strided_slice_81/stack_1"
  input: "strided_slice_81/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_60"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_23"
  op: "Sum"
  input: "strided_slice_81"
  input: "Const_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_82/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "strided_slice_82/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 25
      }
    }
  }
}
node {
  name: "strided_slice_82/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_82"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_82/stack"
  input: "strided_slice_82/stack_1"
  input: "strided_slice_82/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_83/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 25
      }
    }
  }
}
node {
  name: "strided_slice_83/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 26
      }
    }
  }
}
node {
  name: "strided_slice_83/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_83"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_83/stack"
  input: "strided_slice_83/stack_1"
  input: "strided_slice_83/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_61"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_84/stack"
  op: "Pack"
  input: "strided_slice_82"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_84/stack_1"
  op: "Pack"
  input: "strided_slice_83"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_84/stack_2"
  op: "Pack"
  input: "Const_61"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_84"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_84/stack"
  input: "strided_slice_84/stack_1"
  input: "strided_slice_84/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_62"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_24"
  op: "Sum"
  input: "strided_slice_84"
  input: "Const_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_85/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 25
      }
    }
  }
}
node {
  name: "strided_slice_85/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 26
      }
    }
  }
}
node {
  name: "strided_slice_85/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_85"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_85/stack"
  input: "strided_slice_85/stack_1"
  input: "strided_slice_85/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_86/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 26
      }
    }
  }
}
node {
  name: "strided_slice_86/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "strided_slice_86/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_86"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_86/stack"
  input: "strided_slice_86/stack_1"
  input: "strided_slice_86/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_63"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_87/stack"
  op: "Pack"
  input: "strided_slice_85"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_87/stack_1"
  op: "Pack"
  input: "strided_slice_86"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_87/stack_2"
  op: "Pack"
  input: "Const_63"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_87"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_87/stack"
  input: "strided_slice_87/stack_1"
  input: "strided_slice_87/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_64"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_25"
  op: "Sum"
  input: "strided_slice_87"
  input: "Const_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_88/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 26
      }
    }
  }
}
node {
  name: "strided_slice_88/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "strided_slice_88/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_88"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_88/stack"
  input: "strided_slice_88/stack_1"
  input: "strided_slice_88/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_89/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "strided_slice_89/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "strided_slice_89/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_89"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_89/stack"
  input: "strided_slice_89/stack_1"
  input: "strided_slice_89/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_65"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_90/stack"
  op: "Pack"
  input: "strided_slice_88"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_90/stack_1"
  op: "Pack"
  input: "strided_slice_89"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_90/stack_2"
  op: "Pack"
  input: "Const_65"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_90"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_90/stack"
  input: "strided_slice_90/stack_1"
  input: "strided_slice_90/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_66"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_26"
  op: "Sum"
  input: "strided_slice_90"
  input: "Const_66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_91/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 27
      }
    }
  }
}
node {
  name: "strided_slice_91/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "strided_slice_91/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_91"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_91/stack"
  input: "strided_slice_91/stack_1"
  input: "strided_slice_91/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_92/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "strided_slice_92/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "strided_slice_92/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_92"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_92/stack"
  input: "strided_slice_92/stack_1"
  input: "strided_slice_92/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_67"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_93/stack"
  op: "Pack"
  input: "strided_slice_91"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_93/stack_1"
  op: "Pack"
  input: "strided_slice_92"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_93/stack_2"
  op: "Pack"
  input: "Const_67"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_93"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_93/stack"
  input: "strided_slice_93/stack_1"
  input: "strided_slice_93/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_68"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_27"
  op: "Sum"
  input: "strided_slice_93"
  input: "Const_68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_94/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "strided_slice_94/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "strided_slice_94/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_94"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_94/stack"
  input: "strided_slice_94/stack_1"
  input: "strided_slice_94/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_95/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "strided_slice_95/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "strided_slice_95/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_95"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_95/stack"
  input: "strided_slice_95/stack_1"
  input: "strided_slice_95/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_69"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_96/stack"
  op: "Pack"
  input: "strided_slice_94"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_96/stack_1"
  op: "Pack"
  input: "strided_slice_95"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_96/stack_2"
  op: "Pack"
  input: "Const_69"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_96"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_96/stack"
  input: "strided_slice_96/stack_1"
  input: "strided_slice_96/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_70"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_28"
  op: "Sum"
  input: "strided_slice_96"
  input: "Const_70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_97/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "strided_slice_97/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "strided_slice_97/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_97"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_97/stack"
  input: "strided_slice_97/stack_1"
  input: "strided_slice_97/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_98/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "strided_slice_98/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 31
      }
    }
  }
}
node {
  name: "strided_slice_98/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_98"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_98/stack"
  input: "strided_slice_98/stack_1"
  input: "strided_slice_98/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_71"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_99/stack"
  op: "Pack"
  input: "strided_slice_97"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_99/stack_1"
  op: "Pack"
  input: "strided_slice_98"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_99/stack_2"
  op: "Pack"
  input: "Const_71"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_99"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_99/stack"
  input: "strided_slice_99/stack_1"
  input: "strided_slice_99/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_72"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_29"
  op: "Sum"
  input: "strided_slice_99"
  input: "Const_72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_100/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "strided_slice_100/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 31
      }
    }
  }
}
node {
  name: "strided_slice_100/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_100"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_100/stack"
  input: "strided_slice_100/stack_1"
  input: "strided_slice_100/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_101/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 31
      }
    }
  }
}
node {
  name: "strided_slice_101/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "strided_slice_101/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_101"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_101/stack"
  input: "strided_slice_101/stack_1"
  input: "strided_slice_101/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_73"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_102/stack"
  op: "Pack"
  input: "strided_slice_100"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_102/stack_1"
  op: "Pack"
  input: "strided_slice_101"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_102/stack_2"
  op: "Pack"
  input: "Const_73"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_102"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_102/stack"
  input: "strided_slice_102/stack_1"
  input: "strided_slice_102/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_74"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_30"
  op: "Sum"
  input: "strided_slice_102"
  input: "Const_74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "strided_slice_103/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 31
      }
    }
  }
}
node {
  name: "strided_slice_103/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "strided_slice_103/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_103"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_103/stack"
  input: "strided_slice_103/stack_1"
  input: "strided_slice_103/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_104/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "strided_slice_104/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 33
      }
    }
  }
}
node {
  name: "strided_slice_104/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_104"
  op: "StridedSlice"
  input: "concat_2"
  input: "strided_slice_104/stack"
  input: "strided_slice_104/stack_1"
  input: "strided_slice_104/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Const_75"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_105/stack"
  op: "Pack"
  input: "strided_slice_103"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_105/stack_1"
  op: "Pack"
  input: "strided_slice_104"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_105/stack_2"
  op: "Pack"
  input: "Const_75"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "strided_slice_105"
  op: "StridedSlice"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "strided_slice_105/stack"
  input: "strided_slice_105/stack_1"
  input: "strided_slice_105/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_76"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_31"
  op: "Sum"
  input: "strided_slice_105"
  input: "Const_76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "stack"
  op: "Pack"
  input: "Sum"
  input: "Sum_1"
  input: "Sum_2"
  input: "Sum_3"
  input: "Sum_4"
  input: "Sum_5"
  input: "Sum_6"
  input: "Sum_7"
  input: "Sum_8"
  input: "Sum_9"
  input: "Sum_10"
  input: "Sum_11"
  input: "Sum_12"
  input: "Sum_13"
  input: "Sum_14"
  input: "Sum_15"
  input: "Sum_16"
  input: "Sum_17"
  input: "Sum_18"
  input: "Sum_19"
  input: "Sum_20"
  input: "Sum_21"
  input: "Sum_22"
  input: "Sum_23"
  input: "Sum_24"
  input: "Sum_25"
  input: "Sum_26"
  input: "Sum_27"
  input: "Sum_28"
  input: "Sum_29"
  input: "Sum_30"
  input: "Sum_31"
  attr {
    key: "N"
    value {
      i: 32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Log/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "Log"
  op: "Log"
  input: "Log/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "mul/x"
  input: "Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sub_2"
  op: "Sub"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_2"
  input: "mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Maximum"
  op: "Maximum"
  input: "sub_2"
  input: "Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "ToFloat_4"
  op: "Cast"
  input: "global_step/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Pow/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9999899864196777
      }
    }
  }
}
node {
  name: "Pow"
  op: "Pow"
  input: "Pow/x"
  input: "ToFloat_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sub_3/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sub_3"
  op: "Sub"
  input: "sub_3/x"
  input: "Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "mul_1"
  op: "Mul"
  input: "sub_3"
  input: "mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const_77"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "stack"
  input: "Const_77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Const_78"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_1"
  op: "Mean"
  input: "Maximum"
  input: "Const_78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_2"
  op: "Mul"
  input: "mul_1"
  input: "Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add_1"
  op: "AddV2"
  input: "Mean"
  input: "mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Log_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "Log_1"
  op: "Log"
  input: "Log_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv_2"
  op: "RealDiv"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_2"
  input: "Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "ToFloat_5"
  op: "Cast"
  input: "global_step/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Pow_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9998999834060669
      }
    }
  }
}
node {
  name: "Pow_1"
  op: "Pow"
  input: "Pow_1/x"
  input: "ToFloat_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_3/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0004900000058114529
      }
    }
  }
}
node {
  name: "mul_3"
  op: "Mul"
  input: "mul_3/x"
  input: "Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-06
      }
    }
  }
}
node {
  name: "add_2"
  op: "AddV2"
  input: "mul_3"
  input: "add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "learning_rate/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate"
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "ScalarSummary"
  input: "learning_rate/tags"
  input: "add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "range"
  op: "Range"
  input: "range/start"
  input: "Rank"
  input: "range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Mean_2"
  op: "Mean"
  input: "add_1"
  input: "range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const_79"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_3"
  op: "Mean"
  input: "stack"
  input: "Const_79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "losses/r_loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "losses/r_loss"
      }
    }
  }
}
node {
  name: "losses/r_loss"
  op: "ScalarSummary"
  input: "losses/r_loss/tags"
  input: "Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const_80"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_4"
  op: "Mean"
  input: "Maximum"
  input: "Const_80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "losses/kl_loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "losses/kl_loss"
      }
    }
  }
}
node {
  name: "losses/kl_loss"
  op: "ScalarSummary"
  input: "losses/kl_loss/tags"
  input: "Mean_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const_81"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_5"
  op: "Mean"
  input: "truediv_2"
  input: "Const_81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "losses/kl_bits/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "losses/kl_bits"
      }
    }
  }
}
node {
  name: "losses/kl_bits"
  op: "ScalarSummary"
  input: "losses/kl_bits/tags"
  input: "Mean_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "range_1"
  op: "Range"
  input: "range_1/start"
  input: "Rank_1"
  input: "range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Mean_6"
  op: "Mean"
  input: "mul_1"
  input: "range_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "losses/kl_beta/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "losses/kl_beta"
      }
    }
  }
}
node {
  name: "losses/kl_beta"
  op: "ScalarSummary"
  input: "losses/kl_beta/tags"
  input: "Mean_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add"
  op: "AddV2"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/StackPushV2"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/StackPushV2"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/f_sync"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_1"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_2"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_3"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_4"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_5"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_6"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_7"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_8"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_1"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_2"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_3"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_4"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_5"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_6"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_7"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_8"
  input: "^gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_4"
  op: "Enter"
  input: "gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_2"
  op: "Merge"
  input: "gradients/f_count_4"
  input: "gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_2"
  op: "Switch"
  input: "gradients/Merge_2"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add_1/y"
  op: "Const"
  input: "^encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_1"
  op: "AddV2"
  input: "gradients/Switch_2:1"
  input: "gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_2"
  op: "NextIteration"
  input: "gradients/Add_1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPushV2"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_2"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_3"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_4"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_5"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_6"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_7"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_5"
  op: "Exit"
  input: "gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_5"
  op: "Enter"
  input: "gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_3"
  op: "Merge"
  input: "gradients/b_count_5"
  input: "gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "gradients/Merge_3"
  input: "gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_6"
  op: "LoopCond"
  input: "gradients/GreaterEqual_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_3"
  op: "Switch"
  input: "gradients/Merge_3"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub_1"
  op: "Sub"
  input: "gradients/Switch_3:1"
  input: "gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_3"
  op: "NextIteration"
  input: "gradients/Sub_1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_7"
  op: "Exit"
  input: "gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_7"
  op: "Enter"
  input: "gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_4"
  op: "Merge"
  input: "gradients/f_count_7"
  input: "gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_4"
  op: "Switch"
  input: "gradients/Merge_4"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add_2/y"
  op: "Const"
  input: "^encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_2"
  op: "AddV2"
  input: "gradients/Switch_4:1"
  input: "gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_4"
  op: "NextIteration"
  input: "gradients/Add_2"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPushV2"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_2"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_3"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_4"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_5"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_6"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_7"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_8"
  op: "Exit"
  input: "gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_9"
  op: "Enter"
  input: "gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_5"
  op: "Merge"
  input: "gradients/b_count_9"
  input: "gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "gradients/Merge_5"
  input: "gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_10"
  op: "LoopCond"
  input: "gradients/GreaterEqual_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_5"
  op: "Switch"
  input: "gradients/Merge_5"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub_2"
  op: "Sub"
  input: "gradients/Switch_5:1"
  input: "gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_5"
  op: "NextIteration"
  input: "gradients/Sub_2"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_11"
  op: "Exit"
  input: "gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/grad_ys_0"
}
node {
  name: "gradients/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/grad_ys_0"
  input: "^gradients/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/grad_ys_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/grad_ys_0"
  input: "^gradients/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/grad_ys_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_1_grad/tuple/control_dependency"
  input: "gradients/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape"
  input: "gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32.0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile"
  input: "gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/add_1_grad/tuple/control_dependency_1"
  input: "Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/add_1_grad/tuple/control_dependency_1"
  input: "mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mul_2_grad/Mul"
  input: "^gradients/mul_2_grad/Mul_1"
}
node {
  name: "gradients/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mul_2_grad/Mul"
  input: "^gradients/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_2_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mul_2_grad/Mul_1"
  input: "^gradients/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_2_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/unstack"
  op: "Unpack"
  input: "gradients/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/stack_grad/unstack"
}
node {
  name: "gradients/stack_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/stack_grad/unstack"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/stack_grad/unstack:1"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/stack_grad/unstack:2"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/stack_grad/unstack:3"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/stack_grad/unstack:4"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_5"
  op: "Identity"
  input: "gradients/stack_grad/unstack:5"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_6"
  op: "Identity"
  input: "gradients/stack_grad/unstack:6"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_7"
  op: "Identity"
  input: "gradients/stack_grad/unstack:7"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_8"
  op: "Identity"
  input: "gradients/stack_grad/unstack:8"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_9"
  op: "Identity"
  input: "gradients/stack_grad/unstack:9"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_10"
  op: "Identity"
  input: "gradients/stack_grad/unstack:10"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_11"
  op: "Identity"
  input: "gradients/stack_grad/unstack:11"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_12"
  op: "Identity"
  input: "gradients/stack_grad/unstack:12"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_13"
  op: "Identity"
  input: "gradients/stack_grad/unstack:13"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_14"
  op: "Identity"
  input: "gradients/stack_grad/unstack:14"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_15"
  op: "Identity"
  input: "gradients/stack_grad/unstack:15"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_16"
  op: "Identity"
  input: "gradients/stack_grad/unstack:16"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_17"
  op: "Identity"
  input: "gradients/stack_grad/unstack:17"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_18"
  op: "Identity"
  input: "gradients/stack_grad/unstack:18"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_19"
  op: "Identity"
  input: "gradients/stack_grad/unstack:19"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_20"
  op: "Identity"
  input: "gradients/stack_grad/unstack:20"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_21"
  op: "Identity"
  input: "gradients/stack_grad/unstack:21"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_22"
  op: "Identity"
  input: "gradients/stack_grad/unstack:22"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_23"
  op: "Identity"
  input: "gradients/stack_grad/unstack:23"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_24"
  op: "Identity"
  input: "gradients/stack_grad/unstack:24"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_25"
  op: "Identity"
  input: "gradients/stack_grad/unstack:25"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_26"
  op: "Identity"
  input: "gradients/stack_grad/unstack:26"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_27"
  op: "Identity"
  input: "gradients/stack_grad/unstack:27"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_28"
  op: "Identity"
  input: "gradients/stack_grad/unstack:28"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_29"
  op: "Identity"
  input: "gradients/stack_grad/unstack:29"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_30"
  op: "Identity"
  input: "gradients/stack_grad/unstack:30"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/stack_grad/tuple/control_dependency_31"
  op: "Identity"
  input: "gradients/stack_grad/unstack:31"
  input: "^gradients/stack_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/stack_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_2_grad/tuple/control_dependency_1"
  input: "gradients/Mean_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_1_grad/Reshape"
  input: "gradients/Mean_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32.0
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_1_grad/Tile"
  input: "gradients/Mean_1_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency"
  input: "gradients/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Shape"
  op: "Shape"
  input: "strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_grad/Reshape"
  input: "gradients/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_1"
  input: "gradients/Sum_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/Shape"
  op: "Shape"
  input: "strided_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_1_grad/Reshape"
  input: "gradients/Sum_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_2"
  input: "gradients/Sum_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_2_grad/Shape"
  op: "Shape"
  input: "strided_slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_2_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_2_grad/Reshape"
  input: "gradients/Sum_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_3_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_3"
  input: "gradients/Sum_3_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_3_grad/Shape"
  op: "Shape"
  input: "strided_slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_3_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_3_grad/Reshape"
  input: "gradients/Sum_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_4_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_4_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_4"
  input: "gradients/Sum_4_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_4_grad/Shape"
  op: "Shape"
  input: "strided_slice_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_4_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_4_grad/Reshape"
  input: "gradients/Sum_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_5_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_5_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_5"
  input: "gradients/Sum_5_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_5_grad/Shape"
  op: "Shape"
  input: "strided_slice_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_5_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_5_grad/Reshape"
  input: "gradients/Sum_5_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_6_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_6_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_6"
  input: "gradients/Sum_6_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_6_grad/Shape"
  op: "Shape"
  input: "strided_slice_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_6_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_6_grad/Reshape"
  input: "gradients/Sum_6_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_7_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_7_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_7"
  input: "gradients/Sum_7_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_7_grad/Shape"
  op: "Shape"
  input: "strided_slice_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_7_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_7_grad/Reshape"
  input: "gradients/Sum_7_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_8_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_8_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_8"
  input: "gradients/Sum_8_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_8_grad/Shape"
  op: "Shape"
  input: "strided_slice_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_8_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_8_grad/Reshape"
  input: "gradients/Sum_8_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_9_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_9_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_9"
  input: "gradients/Sum_9_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_9_grad/Shape"
  op: "Shape"
  input: "strided_slice_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_9_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_9_grad/Reshape"
  input: "gradients/Sum_9_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_10_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_10_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_10"
  input: "gradients/Sum_10_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_10_grad/Shape"
  op: "Shape"
  input: "strided_slice_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_10_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_10_grad/Reshape"
  input: "gradients/Sum_10_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_11_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_11_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_11"
  input: "gradients/Sum_11_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_11_grad/Shape"
  op: "Shape"
  input: "strided_slice_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_11_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_11_grad/Reshape"
  input: "gradients/Sum_11_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_12_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_12_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_12"
  input: "gradients/Sum_12_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_12_grad/Shape"
  op: "Shape"
  input: "strided_slice_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_12_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_12_grad/Reshape"
  input: "gradients/Sum_12_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_13_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_13_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_13"
  input: "gradients/Sum_13_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_13_grad/Shape"
  op: "Shape"
  input: "strided_slice_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_13_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_13_grad/Reshape"
  input: "gradients/Sum_13_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_14_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_14_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_14"
  input: "gradients/Sum_14_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_14_grad/Shape"
  op: "Shape"
  input: "strided_slice_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_14_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_14_grad/Reshape"
  input: "gradients/Sum_14_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_15_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_15_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_15"
  input: "gradients/Sum_15_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_15_grad/Shape"
  op: "Shape"
  input: "strided_slice_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_15_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_15_grad/Reshape"
  input: "gradients/Sum_15_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_16_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_16_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_16"
  input: "gradients/Sum_16_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_16_grad/Shape"
  op: "Shape"
  input: "strided_slice_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_16_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_16_grad/Reshape"
  input: "gradients/Sum_16_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_17_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_17_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_17"
  input: "gradients/Sum_17_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_17_grad/Shape"
  op: "Shape"
  input: "strided_slice_63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_17_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_17_grad/Reshape"
  input: "gradients/Sum_17_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_18_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_18_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_18"
  input: "gradients/Sum_18_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_18_grad/Shape"
  op: "Shape"
  input: "strided_slice_66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_18_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_18_grad/Reshape"
  input: "gradients/Sum_18_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_19_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_19_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_19"
  input: "gradients/Sum_19_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_19_grad/Shape"
  op: "Shape"
  input: "strided_slice_69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_19_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_19_grad/Reshape"
  input: "gradients/Sum_19_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_20_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_20_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_20"
  input: "gradients/Sum_20_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_20_grad/Shape"
  op: "Shape"
  input: "strided_slice_72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_20_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_20_grad/Reshape"
  input: "gradients/Sum_20_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_21_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_21_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_21"
  input: "gradients/Sum_21_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_21_grad/Shape"
  op: "Shape"
  input: "strided_slice_75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_21_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_21_grad/Reshape"
  input: "gradients/Sum_21_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_22_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_22_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_22"
  input: "gradients/Sum_22_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_22_grad/Shape"
  op: "Shape"
  input: "strided_slice_78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_22_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_22_grad/Reshape"
  input: "gradients/Sum_22_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_23_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_23_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_23"
  input: "gradients/Sum_23_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_23_grad/Shape"
  op: "Shape"
  input: "strided_slice_81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_23_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_23_grad/Reshape"
  input: "gradients/Sum_23_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_24_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_24_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_24"
  input: "gradients/Sum_24_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_24_grad/Shape"
  op: "Shape"
  input: "strided_slice_84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_24_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_24_grad/Reshape"
  input: "gradients/Sum_24_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_25_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_25_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_25"
  input: "gradients/Sum_25_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_25_grad/Shape"
  op: "Shape"
  input: "strided_slice_87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_25_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_25_grad/Reshape"
  input: "gradients/Sum_25_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_26_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_26_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_26"
  input: "gradients/Sum_26_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_26_grad/Shape"
  op: "Shape"
  input: "strided_slice_90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_26_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_26_grad/Reshape"
  input: "gradients/Sum_26_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_27_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_27_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_27"
  input: "gradients/Sum_27_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_27_grad/Shape"
  op: "Shape"
  input: "strided_slice_93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_27_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_27_grad/Reshape"
  input: "gradients/Sum_27_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_28_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_28_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_28"
  input: "gradients/Sum_28_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_28_grad/Shape"
  op: "Shape"
  input: "strided_slice_96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_28_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_28_grad/Reshape"
  input: "gradients/Sum_28_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_29_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_29_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_29"
  input: "gradients/Sum_29_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_29_grad/Shape"
  op: "Shape"
  input: "strided_slice_99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_29_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_29_grad/Reshape"
  input: "gradients/Sum_29_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_30_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_30_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_30"
  input: "gradients/Sum_30_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_30_grad/Shape"
  op: "Shape"
  input: "strided_slice_102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_30_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_30_grad/Reshape"
  input: "gradients/Sum_30_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_31_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_31_grad/Reshape"
  op: "Reshape"
  input: "gradients/stack_grad/tuple/control_dependency_31"
  input: "gradients/Sum_31_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_31_grad/Shape"
  op: "Shape"
  input: "strided_slice_105"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_31_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_31_grad/Reshape"
  input: "gradients/Sum_31_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/zeros_like"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "sub_2"
  input: "Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Maximum_grad/Shape"
  input: "gradients/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/SelectV2"
  op: "SelectV2"
  input: "gradients/Maximum_grad/GreaterEqual"
  input: "gradients/Mean_1_grad/truediv"
  input: "gradients/Maximum_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/Sum"
  op: "Sum"
  input: "gradients/Maximum_grad/SelectV2"
  input: "gradients/Maximum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Maximum_grad/Reshape"
  op: "Reshape"
  input: "gradients/Maximum_grad/Sum"
  input: "gradients/Maximum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/SelectV2_1"
  op: "SelectV2"
  input: "gradients/Maximum_grad/GreaterEqual"
  input: "gradients/Maximum_grad/zeros_like"
  input: "gradients/Mean_1_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/Sum_1"
  op: "Sum"
  input: "gradients/Maximum_grad/SelectV2_1"
  input: "gradients/Maximum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Maximum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Maximum_grad/Sum_1"
  input: "gradients/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Maximum_grad/Reshape"
  input: "^gradients/Maximum_grad/Reshape_1"
}
node {
  name: "gradients/Maximum_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Maximum_grad/Reshape"
  input: "^gradients/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Maximum_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Maximum_grad/Reshape_1"
  input: "^gradients/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Maximum_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/strided_slice_12_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_12_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_12_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_12_grad/Shape"
  input: "strided_slice_12/stack"
  input: "strided_slice_12/stack_1"
  input: "gradients/strided_slice_12_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_15_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_15_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_15_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_15_grad/Shape"
  input: "strided_slice_15/stack"
  input: "strided_slice_15/stack_1"
  input: "gradients/strided_slice_15_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_1_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_18_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_18_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_18_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_18_grad/Shape"
  input: "strided_slice_18/stack"
  input: "strided_slice_18/stack_1"
  input: "gradients/strided_slice_18_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_2_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_21_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_21_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_21_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_21_grad/Shape"
  input: "strided_slice_21/stack"
  input: "strided_slice_21/stack_1"
  input: "gradients/strided_slice_21_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_3_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_24_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_24_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_24_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_24_grad/Shape"
  input: "strided_slice_24/stack"
  input: "strided_slice_24/stack_1"
  input: "gradients/strided_slice_24_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_4_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_27_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_27_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_27_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_27_grad/Shape"
  input: "strided_slice_27/stack"
  input: "strided_slice_27/stack_1"
  input: "gradients/strided_slice_27_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_5_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_30_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_30_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_30_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_30_grad/Shape"
  input: "strided_slice_30/stack"
  input: "strided_slice_30/stack_1"
  input: "gradients/strided_slice_30_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_6_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_33_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_33_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_33_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_33_grad/Shape"
  input: "strided_slice_33/stack"
  input: "strided_slice_33/stack_1"
  input: "gradients/strided_slice_33_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_7_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_36_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_36_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_36_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_36_grad/Shape"
  input: "strided_slice_36/stack"
  input: "strided_slice_36/stack_1"
  input: "gradients/strided_slice_36_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_8_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_39_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_39_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_39_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_39_grad/Shape"
  input: "strided_slice_39/stack"
  input: "strided_slice_39/stack_1"
  input: "gradients/strided_slice_39_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_9_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_42_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_42_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_42_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_42_grad/Shape"
  input: "strided_slice_42/stack"
  input: "strided_slice_42/stack_1"
  input: "gradients/strided_slice_42_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_10_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_45_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_45_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_45_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_45_grad/Shape"
  input: "strided_slice_45/stack"
  input: "strided_slice_45/stack_1"
  input: "gradients/strided_slice_45_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_11_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_48_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_48_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_48_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_48_grad/Shape"
  input: "strided_slice_48/stack"
  input: "strided_slice_48/stack_1"
  input: "gradients/strided_slice_48_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_12_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_51_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_51_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_51_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_51_grad/Shape"
  input: "strided_slice_51/stack"
  input: "strided_slice_51/stack_1"
  input: "gradients/strided_slice_51_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_13_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_54_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_54_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_54_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_54_grad/Shape"
  input: "strided_slice_54/stack"
  input: "strided_slice_54/stack_1"
  input: "gradients/strided_slice_54_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_14_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_57_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_57_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_57_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_57_grad/Shape"
  input: "strided_slice_57/stack"
  input: "strided_slice_57/stack_1"
  input: "gradients/strided_slice_57_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_15_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_60_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_60_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_60_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_60_grad/Shape"
  input: "strided_slice_60/stack"
  input: "strided_slice_60/stack_1"
  input: "gradients/strided_slice_60_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_16_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_63_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_63_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_63_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_63_grad/Shape"
  input: "strided_slice_63/stack"
  input: "strided_slice_63/stack_1"
  input: "gradients/strided_slice_63_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_17_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_66_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_66_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_66_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_66_grad/Shape"
  input: "strided_slice_66/stack"
  input: "strided_slice_66/stack_1"
  input: "gradients/strided_slice_66_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_18_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_69_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_69_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_69_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_69_grad/Shape"
  input: "strided_slice_69/stack"
  input: "strided_slice_69/stack_1"
  input: "gradients/strided_slice_69_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_19_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_72_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_72_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_72_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_72_grad/Shape"
  input: "strided_slice_72/stack"
  input: "strided_slice_72/stack_1"
  input: "gradients/strided_slice_72_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_20_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_75_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_75_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_75_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_75_grad/Shape"
  input: "strided_slice_75/stack"
  input: "strided_slice_75/stack_1"
  input: "gradients/strided_slice_75_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_21_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_78_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_78_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_78_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_78_grad/Shape"
  input: "strided_slice_78/stack"
  input: "strided_slice_78/stack_1"
  input: "gradients/strided_slice_78_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_22_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_81_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_81_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_81_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_81_grad/Shape"
  input: "strided_slice_81/stack"
  input: "strided_slice_81/stack_1"
  input: "gradients/strided_slice_81_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_23_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_84_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_84_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_84_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_84_grad/Shape"
  input: "strided_slice_84/stack"
  input: "strided_slice_84/stack_1"
  input: "gradients/strided_slice_84_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_24_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_87_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_87_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_87_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_87_grad/Shape"
  input: "strided_slice_87/stack"
  input: "strided_slice_87/stack_1"
  input: "gradients/strided_slice_87_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_25_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_90_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_90_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_90_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_90_grad/Shape"
  input: "strided_slice_90/stack"
  input: "strided_slice_90/stack_1"
  input: "gradients/strided_slice_90_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_26_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_93_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_93_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_93_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_93_grad/Shape"
  input: "strided_slice_93/stack"
  input: "strided_slice_93/stack_1"
  input: "gradients/strided_slice_93_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_27_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_96_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_96_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_96_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_96_grad/Shape"
  input: "strided_slice_96/stack"
  input: "strided_slice_96/stack_1"
  input: "gradients/strided_slice_96_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_28_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_99_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_99_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_99_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_99_grad/Shape"
  input: "strided_slice_99/stack"
  input: "strided_slice_99/stack_1"
  input: "gradients/strided_slice_99_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_29_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_102_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_102_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_102_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_102_grad/Shape"
  input: "strided_slice_102/stack"
  input: "strided_slice_102/stack_1"
  input: "gradients/strided_slice_102_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_30_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/strided_slice_105_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_105_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_105_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/strided_slice_105_grad/Shape"
  input: "strided_slice_105/stack"
  input: "strided_slice_105/stack_1"
  input: "gradients/strided_slice_105_grad/StridedSliceGrad/strides"
  input: "gradients/Sum_31_grad/Tile"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/sub_2_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "gradients/sub_2_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sub_2_grad/BroadcastGradientArgs/s0"
  input: "gradients/sub_2_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_2_grad/Neg"
  op: "Neg"
  input: "gradients/Maximum_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_2_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/sub_2_grad/Sum"
  op: "Sum"
  input: "gradients/sub_2_grad/Neg"
  input: "gradients/sub_2_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sub_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_2_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/sub_2_grad/Sum"
  input: "gradients/sub_2_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sub_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Maximum_grad/tuple/control_dependency"
  input: "^gradients/sub_2_grad/Reshape"
}
node {
  name: "gradients/sub_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Maximum_grad/tuple/control_dependency"
  input: "^gradients/sub_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Maximum_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sub_2_grad/Reshape"
  input: "^gradients/sub_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/strided_slice_12_grad/StridedSliceGrad"
  input: "gradients/strided_slice_15_grad/StridedSliceGrad"
  input: "gradients/strided_slice_18_grad/StridedSliceGrad"
  input: "gradients/strided_slice_21_grad/StridedSliceGrad"
  input: "gradients/strided_slice_24_grad/StridedSliceGrad"
  input: "gradients/strided_slice_27_grad/StridedSliceGrad"
  input: "gradients/strided_slice_30_grad/StridedSliceGrad"
  input: "gradients/strided_slice_33_grad/StridedSliceGrad"
  input: "gradients/strided_slice_36_grad/StridedSliceGrad"
  input: "gradients/strided_slice_39_grad/StridedSliceGrad"
  input: "gradients/strided_slice_42_grad/StridedSliceGrad"
  input: "gradients/strided_slice_45_grad/StridedSliceGrad"
  input: "gradients/strided_slice_48_grad/StridedSliceGrad"
  input: "gradients/strided_slice_51_grad/StridedSliceGrad"
  input: "gradients/strided_slice_54_grad/StridedSliceGrad"
  input: "gradients/strided_slice_57_grad/StridedSliceGrad"
  input: "gradients/strided_slice_60_grad/StridedSliceGrad"
  input: "gradients/strided_slice_63_grad/StridedSliceGrad"
  input: "gradients/strided_slice_66_grad/StridedSliceGrad"
  input: "gradients/strided_slice_69_grad/StridedSliceGrad"
  input: "gradients/strided_slice_72_grad/StridedSliceGrad"
  input: "gradients/strided_slice_75_grad/StridedSliceGrad"
  input: "gradients/strided_slice_78_grad/StridedSliceGrad"
  input: "gradients/strided_slice_81_grad/StridedSliceGrad"
  input: "gradients/strided_slice_84_grad/StridedSliceGrad"
  input: "gradients/strided_slice_87_grad/StridedSliceGrad"
  input: "gradients/strided_slice_90_grad/StridedSliceGrad"
  input: "gradients/strided_slice_93_grad/StridedSliceGrad"
  input: "gradients/strided_slice_96_grad/StridedSliceGrad"
  input: "gradients/strided_slice_99_grad/StridedSliceGrad"
  input: "gradients/strided_slice_102_grad/StridedSliceGrad"
  input: "gradients/strided_slice_105_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/strided_slice_12_grad/StridedSliceGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_sg/Reshape_2_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_with_logits_sg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_sg/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN"
  input: "gradients/softmax_cross_entropy_with_logits_sg/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sub_2_grad/tuple/control_dependency"
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sub_2_grad/tuple/control_dependency"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Maximum_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sub_2_grad/tuple/control_dependency"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Maximum_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "softmax_cross_entropy_with_logits_sg:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_sg_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_sg_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/softmax_cross_entropy_with_logits_sg/Reshape_2_grad/Reshape"
  input: "gradients/softmax_cross_entropy_with_logits_sg_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_sg_grad/mul"
  op: "Mul"
  input: "gradients/softmax_cross_entropy_with_logits_sg_grad/ExpandDims"
  input: "softmax_cross_entropy_with_logits_sg:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_sg_grad/LogSoftmax"
  op: "LogSoftmax"
  input: "softmax_cross_entropy_with_logits_sg/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_sg_grad/Neg"
  op: "Neg"
  input: "gradients/softmax_cross_entropy_with_logits_sg_grad/LogSoftmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_sg_grad/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_sg_grad/ExpandDims_1"
  op: "ExpandDims"
  input: "gradients/softmax_cross_entropy_with_logits_sg/Reshape_2_grad/Reshape"
  input: "gradients/softmax_cross_entropy_with_logits_sg_grad/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_sg_grad/mul_1"
  op: "Mul"
  input: "gradients/softmax_cross_entropy_with_logits_sg_grad/ExpandDims_1"
  input: "gradients/softmax_cross_entropy_with_logits_sg_grad/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_sg_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/softmax_cross_entropy_with_logits_sg_grad/mul"
  input: "^gradients/softmax_cross_entropy_with_logits_sg_grad/mul_1"
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_sg_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_with_logits_sg_grad/mul"
  input: "^gradients/softmax_cross_entropy_with_logits_sg_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_with_logits_sg_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_sg_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_with_logits_sg_grad/mul_1"
  input: "^gradients/softmax_cross_entropy_with_logits_sg_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_with_logits_sg_grad/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/BroadcastGradientArgs/s0_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/BroadcastGradientArgs/s0_1"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_2_grad/tuple/control_dependency"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/Sum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/Neg"
  op: "Neg"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/Neg"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/Reshape"
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/Reshape"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/Neg"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Mul"
  op: "Mul"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_2_grad/tuple/control_dependency_1"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Mul"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Sum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Mul_1"
  op: "Mul"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul/x"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Mul_1"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Reshape"
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Reshape"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Mul_1"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_sg/Reshape_grad/Shape"
  op: "Shape"
  input: "cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_with_logits_sg/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_with_logits_sg_grad/tuple/control_dependency"
  input: "gradients/softmax_cross_entropy_with_logits_sg/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/Maximum/x"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/floordiv/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/floordiv/x"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_grad/tuple/control_dependency_1"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/Reshape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/tuple/control_dependency_1"
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/tuple/control_dependency_1"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/tuple/control_dependency_1"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/softmax_cross_entropy_with_logits_sg/Reshape_grad/Reshape"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_with_logits_sg/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cond_1/Merge_grad/cond_grad"
  input: "^gradients/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_with_logits_sg/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_with_logits_sg/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Abs"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Log_grad/mul"
  op: "Mul"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Sum_grad/Tile"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_1_grad/tuple/control_dependency"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_grad/Sum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_1_grad/tuple/control_dependency"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_grad/Reshape"
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_grad/Reshape"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_1_grad/tuple/control_dependency"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: " \000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/Maximum/x"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/floordiv/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: " \000\000\000\000\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/floordiv/x"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: " \000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_1_grad/tuple/control_dependency_1"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/Reshape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/GatherNd_grad/Shape"
  op: "Shape"
  input: "cond_1/GatherNd/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "gradients/cond_1/GatherNd_grad/ScatterNd"
  op: "ScatterNd"
  input: "cond_1/Where"
  input: "gradients/cond_1/Merge_grad/tuple/control_dependency"
  input: "gradients/cond_1/GatherNd_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_grad/Shape"
  op: "Shape"
  input: "cond_1/Reshape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/cond_1/Merge_grad/tuple/control_dependency_1"
  input: "gradients/cond_1/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Abs_grad/Sign"
  op: "Sign"
  input: "encoder/sigma/Softplus"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Abs_grad/mul"
  op: "Mul"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Log_grad/mul"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: " \000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/add_grad/tuple/control_dependency_1"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_grad/Reshape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Square_1_grad/Const"
  op: "Const"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/Tile"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Square_1_grad/Mul"
  op: "Mul"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Square_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Square_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_1_grad/Tile"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Square_1_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_6"
  op: "Switch"
  input: "decoder/transpose_1"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Identity"
  op: "Identity"
  input: "gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_1"
  op: "Shape"
  input: "gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros/Const"
  op: "Const"
  input: "^gradients/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros"
  op: "Fill"
  input: "gradients/Shape_1"
  input: "gradients/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/GatherNd/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/cond_1/GatherNd_grad/ScatterNd"
  input: "gradients/zeros"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_7"
  op: "Switch"
  input: "decoder/transpose_1"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Identity_1"
  op: "Identity"
  input: "gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_2"
  op: "Shape"
  input: "gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_1/Const"
  op: "Const"
  input: "^gradients/Identity_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_1"
  op: "Fill"
  input: "gradients/Shape_2"
  input: "gradients/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cond_1/Reshape/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_1"
  input: "gradients/cond_1/Reshape_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Square_grad/Const"
  op: "Const"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_grad/Tile"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Square_grad/Mul"
  op: "Mul"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Square_grad/Mul_1"
  op: "Mul"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Sum_grad/Tile"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: " \000\000\000\000\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/BroadcastGradientArgs/s0"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/Mul"
  op: "Mul"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Square_1_grad/Mul_1"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/Mul_1"
  op: "Mul"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Square_1_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/Mul_1"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/Sum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/Mul"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/Reshape"
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/Mul"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/Reshape"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/cond_1/GatherNd/Switch_grad/cond_grad"
  input: "gradients/cond_1/Reshape/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cond_1/GatherNd/Switch_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "decoder/concat_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/AddN_1"
  input: "gradients/decoder/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_grad/StridedSliceGrad/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_grad/StridedSliceGrad/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_grad/StridedSliceGrad/end"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_grad/StridedSliceGrad/shape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_grad/StridedSliceGrad/begin"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_grad/StridedSliceGrad/end"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_grad/StridedSliceGrad/strides"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/Square_grad/Mul_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1_grad/StridedSliceGrad/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1_grad/StridedSliceGrad/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1_grad/StridedSliceGrad/end"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1_grad/StridedSliceGrad/strides"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1_grad/StridedSliceGrad/shape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1_grad/StridedSliceGrad/begin"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1_grad/StridedSliceGrad/end"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1_grad/StridedSliceGrad/strides"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/solve/mul_grad/tuple/control_dependency"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/decoder/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "decoder/TensorArray_1"
  input: "decoder/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/decoder/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "decoder/while/Exit_2"
  input: "^gradients/decoder/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/decoder/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "decoder/TensorArrayStack_1/range"
  input: "gradients/decoder/transpose_1_grad/transpose"
  input: "gradients/decoder/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_4/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_4/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_4"
  op: "Fill"
  input: "gradients/zeros_4/shape_as_tensor"
  input: "gradients/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_5/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_5/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_5"
  op: "Fill"
  input: "gradients/zeros_5/shape_as_tensor"
  input: "gradients/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_6/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_6/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_6"
  op: "Fill"
  input: "gradients/zeros_6/shape_as_tensor"
  input: "gradients/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_7/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_7/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_7"
  op: "Fill"
  input: "gradients/zeros_7/shape_as_tensor"
  input: "gradients/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_8/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000Z\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_8/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_8"
  op: "Fill"
  input: "gradients/zeros_8/shape_as_tensor"
  input: "gradients/zeros_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Shape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_grad/StridedSliceGrad"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/stddev/BroadcastTo"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/RealDiv"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Sum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Neg"
  op: "Neg"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/BroadcastTo"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Neg"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/stddev/BroadcastTo"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/RealDiv_1"
  input: "KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag_1/stddev/BroadcastTo"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/mul"
  op: "Mul"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_grad/StridedSliceGrad"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/mul"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Sum_1"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Reshape"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Reshape_1"
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Reshape"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Reshape_1"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/BroadcastGradientArgs/s0"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1_grad/StridedSliceGrad"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/Sum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/Neg"
  op: "Neg"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/strided_slice_1_grad/StridedSliceGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/Neg"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/Reshape"
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/Reshape"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/Neg"
  input: "^gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/decoder/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/Exit_5_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/Exit_6_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/Exit_7_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/Exit_8_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/BroadcastTo_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/BroadcastTo_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/BroadcastTo_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/BroadcastTo_grad/Const"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/BroadcastTo_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/BroadcastTo_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/truediv_grad/tuple/control_dependency"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/BroadcastTo_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/BroadcastTo_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/BroadcastTo_grad/Sum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/BroadcastTo_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/BroadcastTo_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/BroadcastTo_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/BroadcastTo_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/BroadcastTo_grad/Const"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/BroadcastTo_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/BroadcastTo_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/sub_1_grad/tuple/control_dependency_1"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/BroadcastTo_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/BroadcastTo_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/BroadcastTo_grad/Sum"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/BroadcastTo_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/decoder/while/Exit_2_grad/b_exit"
  input: "gradients/decoder/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/decoder/while/Exit_4_grad/b_exit"
  input: "gradients/decoder/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Switch_5_grad/b_switch"
  op: "Merge"
  input: "gradients/decoder/while/Exit_5_grad/b_exit"
  input: "gradients/decoder/while/Switch_5_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Switch_6_grad/b_switch"
  op: "Merge"
  input: "gradients/decoder/while/Exit_6_grad/b_exit"
  input: "gradients/decoder/while/Switch_6_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Switch_7_grad/b_switch"
  op: "Merge"
  input: "gradients/decoder/while/Exit_7_grad/b_exit"
  input: "gradients/decoder/while/Switch_7_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Switch_8_grad/b_switch"
  op: "Merge"
  input: "gradients/decoder/while/Exit_8_grad/b_exit"
  input: "gradients/decoder/while/Switch_8_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/Abs_grad/Sign"
  op: "Sign"
  input: "encoder/sigma/Softplus"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/Abs_grad/mul"
  op: "Mul"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/BroadcastTo_grad/Reshape"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/decoder/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/decoder/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/while/Merge_2_grad/Switch"
  input: "^gradients/decoder/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/while/Merge_2_grad/Switch:1"
  input: "^gradients/decoder/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/decoder/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/while/Merge_4_grad/Switch"
}
node {
  name: "gradients/decoder/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/while/Merge_4_grad/Switch"
  input: "^gradients/decoder/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/while/Merge_4_grad/Switch:1"
  input: "^gradients/decoder/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_5_grad/Switch"
  op: "Switch"
  input: "gradients/decoder/while/Switch_5_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/while/Merge_5_grad/Switch"
}
node {
  name: "gradients/decoder/while/Merge_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/while/Merge_5_grad/Switch"
  input: "^gradients/decoder/while/Merge_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/while/Merge_5_grad/Switch:1"
  input: "^gradients/decoder/while/Merge_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_6_grad/Switch"
  op: "Switch"
  input: "gradients/decoder/while/Switch_6_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_6_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_6_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/while/Merge_6_grad/Switch"
}
node {
  name: "gradients/decoder/while/Merge_6_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/while/Merge_6_grad/Switch"
  input: "^gradients/decoder/while/Merge_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_6_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_6_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/while/Merge_6_grad/Switch:1"
  input: "^gradients/decoder/while/Merge_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_6_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_7_grad/Switch"
  op: "Switch"
  input: "gradients/decoder/while/Switch_7_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_7_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/while/Merge_7_grad/Switch"
}
node {
  name: "gradients/decoder/while/Merge_7_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/while/Merge_7_grad/Switch"
  input: "^gradients/decoder/while/Merge_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_7_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/while/Merge_7_grad/Switch:1"
  input: "^gradients/decoder/while/Merge_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_8_grad/Switch"
  op: "Switch"
  input: "gradients/decoder/while/Switch_8_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_8_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/while/Merge_8_grad/Switch"
}
node {
  name: "gradients/decoder/while/Merge_8_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/while/Merge_8_grad/Switch"
  input: "^gradients/decoder/while/Merge_8_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Merge_8_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/while/Merge_8_grad/Switch:1"
  input: "^gradients/decoder/while/Merge_8_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/decoder/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/decoder/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Enter_5_grad/Exit"
  op: "Exit"
  input: "gradients/decoder/while/Merge_5_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Enter_6_grad/Exit"
  op: "Exit"
  input: "gradients/decoder/while/Merge_6_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Enter_7_grad/Exit"
  op: "Exit"
  input: "gradients/decoder/while/Merge_7_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Enter_8_grad/Exit"
  op: "Exit"
  input: "gradients/decoder/while/Merge_8_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out"
  op: "Identity"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/output_projection/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out/f_acc"
  op: "StackV2"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/output_projection/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out/Enter"
  op: "Enter"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out/Enter"
  input: "decoder/while/TensorArrayWrite_1/TensorArrayWriteV3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out/b_sync"
  op: "ControlTrigger"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/StackPopV2"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/StackPopV2"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/StackPopV2"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/StackPopV2_1"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8"
  input: "^gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out/StackPopV2"
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/write_barrier"
  op: "Identity"
  input: "gradients/decoder/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/flow_out"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/write_barrier"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/output_projection/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "decoder/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/output_projection/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/write_barrier"
  input: "^gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/output_projection/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "decoder/while/Identity"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/write_barrier"
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/write_barrier"
  input: "^gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/write_barrier"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/decoder/while/Enter_4_grad/Exit"
  input: "gradients/decoder/while/Enter_5_grad/Exit"
  input: "gradients/decoder/while/Enter_6_grad/Exit"
  input: "gradients/decoder/while/Enter_7_grad/Exit"
  input: "split/split_dim"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/TrainingHelperInitialize/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/decoder/while/Enter_8_grad/Exit"
  input: "decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Enter_8_grad/Exit"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/TrainingHelperInitialize/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/TrainingHelperInitialize/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/decoder/TrainingHelperInitialize/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/TrainingHelperInitialize/cond/Merge_grad/cond_grad"
  input: "^gradients/decoder/TrainingHelperInitialize/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Enter_8_grad/Exit"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/TrainingHelperInitialize/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/TrainingHelperInitialize/cond/Merge_grad/cond_grad:1"
  input: "^gradients/decoder/TrainingHelperInitialize/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Enter_8_grad/Exit"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/pred_id"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/f_acc"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/pred_id"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/Enter"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/pred_id"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/decoder/while/Merge_8_grad/tuple/control_dependency_1"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/cond_grad"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/cond_grad:1"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/tuple/control_dependency"
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "^gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/z_to_initial_state/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "decoder/z_to_initial_state/Tanh"
  input: "gradients/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch"
  input: "decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ScheduledOutputTrainingHelper/TrainingHelper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  input: "^gradients/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ScheduledOutputTrainingHelper/TrainingHelper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/index"
  input: "gradients/decoder/TrainingHelperInitialize/cond/Merge_grad/tuple/control_dependency"
  input: "gradients/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/tuple/control_dependency"
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/tuple/control_dependency"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/tuple/control_dependency"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_8_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Switch_8"
  op: "Switch"
  input: "gradients/Const"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/Switch_8"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "decoder/output_projection/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1/Enter"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell:6"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul"
  input: "^gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul"
  input: "^gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1"
  input: "^gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 90
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/Add"
  op: "AddV2"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/z_to_initial_state/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/decoder/z_to_initial_state/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/decoder/z_to_initial_state/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/z_to_initial_state/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/decoder/z_to_initial_state/Tanh_grad/TanhGrad"
}
node {
  name: "gradients/decoder/z_to_initial_state/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/z_to_initial_state/Tanh_grad/TanhGrad"
  input: "^gradients/decoder/z_to_initial_state/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/z_to_initial_state/Tanh_grad/TanhGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/z_to_initial_state/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/z_to_initial_state/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/decoder/z_to_initial_state/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/z_to_initial_state/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_9"
  op: "Switch"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  input: "decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Identity_2"
  op: "Identity"
  input: "gradients/Switch_9:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Shape_3"
  op: "Shape"
  input: "gradients/Switch_9:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_9/Const"
  op: "Const"
  input: "^gradients/Identity_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_9"
  op: "Fill"
  input: "gradients/Shape_3"
  input: "gradients/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  input: "gradients/zeros_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd"
  op: "GatherNd"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add_1_grad/tuple/control_dependency"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/StackPopV2"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/f_acc"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/StackPushV2/Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Cast"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/StackPushV2/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/Enter"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/f_sync"
  op: "ControlTrigger"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/StackPushV2"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/StackPushV2"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/StackPushV2"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/StackPushV2_1"
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/Switch/Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/Switch/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/Switch"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd"
  op: "GatherNd"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add_1_grad/tuple/control_dependency_1"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/StackPopV2"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Cast_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/f_acc"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Cast_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/StackPushV2/Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Cast_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/StackPushV2/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/Enter"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/Switch/Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Cast_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/Switch/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Cast_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/Switch"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/decoder/while/Merge_7_grad/tuple/control_dependency_1"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Const_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Const_3"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Const_4"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Const_5"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
  op: "LSTMBlockCellGrad"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_3"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_3"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_3"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_3"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_4"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8"
  input: "gradients/decoder/while/Merge_6_grad/tuple/control_dependency_1"
  input: "gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_peephole"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:6"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Identity_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Identity_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_1"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_1"
  input: "decoder/while/Identity_6"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Identity_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_2"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Identity_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_2"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_2"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_2"
  input: "decoder/while/Identity_7"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_3"
  op: "Enter"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_3"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_4"
  op: "Enter"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_3"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_5"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_3"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_5"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_5"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_4"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_6"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_4"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_4"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_6"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell:1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_4"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_5"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_7"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_5"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_5"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_7"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell:2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_5"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_7"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_6"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_8"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_6"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_6"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_8"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell:3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_6"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_8"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_7"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_9"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_7"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_7"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_9"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell:4"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_7"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_9"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_8"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_9"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_10"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_8"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_8"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_10"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell:5"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_8"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/MatMul"
  op: "MatMul"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:1"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/Slice/begin"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/Slice/size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/Slice"
  op: "Slice"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/MatMul"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/Slice/begin"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/Slice_1/begin"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/Slice_1/size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/Slice_1"
  op: "Slice"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/MatMul"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/Slice_1/begin"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/concat/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/concat"
  op: "ConcatV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/concat"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/BiasAddGrad"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/MatMul_1"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/Slice"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/Slice_1"
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/Slice"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/Slice_1"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/MatMul_1"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:2"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_5"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:3"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_6"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:4"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_7"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/BiasAddGrad"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/b_acc_1"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/Add"
  op: "AddV2"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/Switch:1"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/z_to_initial_state/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/decoder/z_to_initial_state/BiasAdd_grad/tuple/control_dependency"
  input: "decoder/z_to_initial_state/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/z_to_initial_state/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/shift/forward/add"
  input: "gradients/decoder/z_to_initial_state/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder/z_to_initial_state/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/z_to_initial_state/MatMul_grad/MatMul"
  input: "^gradients/decoder/z_to_initial_state/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/decoder/z_to_initial_state/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/z_to_initial_state/MatMul_grad/MatMul"
  input: "^gradients/decoder/z_to_initial_state/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/z_to_initial_state/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/z_to_initial_state/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/z_to_initial_state/MatMul_grad/MatMul_1"
  input: "^gradients/decoder/z_to_initial_state/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/z_to_initial_state/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/Const"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/Shape"
  op: "Shape"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/StackPushV2/Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Reshape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/StackPushV2/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Enter"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Switch/Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Switch/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/OneHotCategorical/sample/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Switch"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/StackPushV2_1/Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/StackPushV2_1/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Enter_1"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Enter_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Switch_1"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Switch_1/Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Switch_1/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/mod"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/Slice"
  op: "Slice"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ConcatOffset"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ConcatOffset:1"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/Slice"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/Slice_1"
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/Slice"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/Slice_1"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000Z\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1_grad/Squeeze"
  op: "Squeeze"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/decoder/while/Merge_5_grad/tuple/control_dependency_1"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const_6"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Const_7"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Const_8"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Const_9"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Const_10"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
  op: "LSTMBlockCellGrad"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_3"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_3"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_3"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_3"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_4"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8"
  input: "gradients/decoder/while/Merge_4_grad/tuple/control_dependency_1"
  input: "gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_peephole"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Identity_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Identity_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter"
  input: "decoder/while/Identity_8"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_1"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_1"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_1"
  input: "decoder/while/Identity_4"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Identity_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_2"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/Identity_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_2"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_2"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_2"
  input: "decoder/while/Identity_5"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_3"
  op: "Enter"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_3"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_4"
  op: "Enter"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_3"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_5"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_3"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_5"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_5"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_4"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_6"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_4"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_4"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_6"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_4"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_5"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_7"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_5"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_5"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_7"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_5"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_7"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_6"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_8"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_6"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_6"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_8"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_6"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_8"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_7"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_9"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_7"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_7"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_9"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:4"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_7"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_9"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_8"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_9"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_10"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_8"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_8"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_10"
  input: "decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:5"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_8"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul"
  op: "MatMul"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:1"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 602
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice/begin"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice/size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000Z\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice"
  op: "Slice"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice/begin"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1/begin"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1/size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1"
  op: "Slice"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1/begin"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/concat/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/concat"
  op: "ConcatV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 602
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/concat"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/BiasAddGrad"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul_1"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1"
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul_1"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:2"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_5"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:3"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_6"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:4"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_7"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/BiasAddGrad"
  input: "^gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_1"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/Add"
  op: "AddV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/Switch:1"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_1"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/Add"
  op: "AddV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/Switch:1"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_2_grad/Squeeze"
  op: "Squeeze"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_grad/GatherNd/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "gradients/Const_11"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Switch_10"
  op: "Switch"
  input: "gradients/Const_11"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Const_11"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/Shape"
  op: "Shape"
  input: "gradients/Switch_10:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/Shape"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/strided_slice/stack"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/strided_slice/stack_1"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/range"
  op: "Range"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/range/start"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/strided_slice"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/Merge"
  op: "Merge"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/ScatterNd_1_grad/GatherNd"
  input: "gradients/Switch_10:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 346
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/Merge_1"
  op: "Merge"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1_grad/Squeeze"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/range"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/Merge_2"
  op: "Merge"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1_grad/Shape"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_1"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/Add"
  op: "AddV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/Switch:1"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_1"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/Add"
  op: "AddV2"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/Switch:1"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Switch_6_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Switch_7_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "ScheduledOutputTrainingHelper/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/strided_slice"
  op: "StridedSlice"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_2_grad/Shape"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/strided_slice/stack"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/strided_slice/stack_1"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/value"
  op: "UnsortedSegmentSum"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/concat_grad/tuple/control_dependency_1"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_2_grad/Squeeze"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/value"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2/Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch/Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN_4/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/AddN_4/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/AddN_4/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/AddN_4/strided_slice"
  op: "StridedSlice"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/Merge_2"
  input: "gradients/AddN_4/strided_slice/stack"
  input: "gradients/AddN_4/strided_slice/stack_1"
  input: "gradients/AddN_4/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/AddN_4/inputs_1"
  op: "UnsortedSegmentSum"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/Merge"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/GatherNd_1/Switch_grad/cond_grad/Merge_1"
  input: "gradients/AddN_4/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Switch_1_grad/cond_grad"
  input: "gradients/AddN_4/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/pred_id"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/f_acc"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/pred_id"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/Enter"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/pred_id"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/AddN_4"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/AddN_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/cond_grad"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/AddN_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/cond_grad:1"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/AddN_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Switch_8_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/Switch_5_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const_12"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Switch_11"
  op: "Switch"
  input: "gradients/Const_12"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Const_12"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  input: "gradients/Switch_11:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/tuple/control_dependency"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  op: "StackV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2/Switch"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch/Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch/Enter"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Add"
  op: "AddV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1_grad/cond_grad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Const_13"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Switch_12"
  op: "Switch"
  input: "gradients/Const_13"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Const_13"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  input: "gradients/Switch_12:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/flow_out"
  op: "Identity"
  input: "ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/write_barrier"
  op: "Identity"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/flow_out"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "ScheduledOutputTrainingHelper/TensorArray"
  input: "gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/write_barrier"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ScheduledOutputTrainingHelper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/write_barrier"
  input: "^gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ScheduledOutputTrainingHelper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "ScheduledOutputTrainingHelper/TensorArrayUnstack/range"
  input: "gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/write_barrier"
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/write_barrier"
  input: "^gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/write_barrier"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Add"
  op: "AddV2"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2_grad/cond_grad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "ScheduledOutputTrainingHelper/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/ScheduledOutputTrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/ScheduledOutputTrainingHelper/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1_grad/cond_grad"
  input: "gradients/decoder/while/BasicDecoderStep/ScheduledOutputTrainingHelperNextInputs/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/flow_out"
  op: "Identity"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/write_barrier"
  op: "Identity"
  input: "gradients/AddN_5"
  input: "^gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/flow_out"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArray"
  input: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/write_barrier"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ScheduledOutputTrainingHelper/TrainingHelper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/write_barrier"
  input: "^gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ScheduledOutputTrainingHelper/TrainingHelper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/range"
  input: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/write_barrier"
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/write_barrier"
  input: "^gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/write_barrier"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "ScheduledOutputTrainingHelper/TrainingHelper/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 346
          }
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/concat_grad/mod"
  op: "FloorMod"
  input: "ScheduledOutputTrainingHelper/concat/axis"
  input: "gradients/ScheduledOutputTrainingHelper/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/concat_grad/Shape"
  op: "Shape"
  input: "Pad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/concat_grad/ShapeN"
  op: "ShapeN"
  input: "Pad"
  input: "concat_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/ScheduledOutputTrainingHelper/concat_grad/mod"
  input: "gradients/ScheduledOutputTrainingHelper/concat_grad/ShapeN"
  input: "gradients/ScheduledOutputTrainingHelper/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/concat_grad/Slice"
  op: "Slice"
  input: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/transpose_grad/transpose"
  input: "gradients/ScheduledOutputTrainingHelper/concat_grad/ConcatOffset"
  input: "gradients/ScheduledOutputTrainingHelper/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/ScheduledOutputTrainingHelper/TrainingHelper/transpose_grad/transpose"
  input: "gradients/ScheduledOutputTrainingHelper/concat_grad/ConcatOffset:1"
  input: "gradients/ScheduledOutputTrainingHelper/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/ScheduledOutputTrainingHelper/concat_grad/Slice"
  input: "^gradients/ScheduledOutputTrainingHelper/concat_grad/Slice_1"
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/ScheduledOutputTrainingHelper/concat_grad/Slice"
  input: "^gradients/ScheduledOutputTrainingHelper/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/ScheduledOutputTrainingHelper/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/ScheduledOutputTrainingHelper/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/ScheduledOutputTrainingHelper/concat_grad/Slice_1"
  input: "^gradients/ScheduledOutputTrainingHelper/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/ScheduledOutputTrainingHelper/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_6"
  op: "AddN"
  input: "gradients/ScheduledOutputTrainingHelper/transpose_grad/transpose"
  input: "gradients/ScheduledOutputTrainingHelper/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/ScheduledOutputTrainingHelper/transpose_grad/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_1_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/concat_1_grad/mod"
  op: "FloorMod"
  input: "concat_1/axis"
  input: "gradients/concat_1_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/concat_1_grad/Shape"
  op: "Shape"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_1_grad/ShapeN"
  op: "ShapeN"
  input: "zeros_1"
  input: "Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_1_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/concat_1_grad/mod"
  input: "gradients/concat_1_grad/ShapeN"
  input: "gradients/concat_1_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_1_grad/Slice"
  op: "Slice"
  input: "gradients/AddN_6"
  input: "gradients/concat_1_grad/ConcatOffset"
  input: "gradients/concat_1_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_1_grad/Slice_1"
  op: "Slice"
  input: "gradients/AddN_6"
  input: "gradients/concat_1_grad/ConcatOffset:1"
  input: "gradients/concat_1_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/concat_1_grad/Slice"
  input: "^gradients/concat_1_grad/Slice_1"
}
node {
  name: "gradients/concat_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/concat_1_grad/Slice"
  input: "^gradients/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/concat_1_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/concat_1_grad/Slice_1"
  input: "^gradients/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/concat_1_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: " \000\000\000\001\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/stack"
  op: "Pack"
  input: "Tile/multiples"
  input: "gradients/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/transpose"
  op: "Transpose"
  input: "gradients/Tile_grad/stack"
  input: "gradients/Tile_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Reshape"
  op: "Reshape"
  input: "gradients/Tile_grad/transpose"
  input: "gradients/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/range"
  op: "Range"
  input: "gradients/Tile_grad/range/start"
  input: "gradients/Tile_grad/Size"
  input: "gradients/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/concat_1_grad/tuple/control_dependency_1"
  input: "gradients/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Tile_grad/Sum"
  op: "Sum"
  input: "gradients/Tile_grad/Reshape_1"
  input: "gradients/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/ExpandDims_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/Tile_grad/Sum"
  input: "gradients/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_7"
  op: "AddN"
  input: "gradients/decoder/z_to_initial_state/MatMul_grad/tuple/control_dependency"
  input: "gradients/ExpandDims_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/z_to_initial_state/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/shift/forward/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_7"
}
node {
  name: "gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/shift/forward/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_7"
  input: "^gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/shift/forward/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/z_to_initial_state/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/shift/forward/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/AddN_7"
  input: "^gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/shift/forward/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/z_to_initial_state/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/scale_matvec_linear_operator/forward/LinearOperatorDiag/matvec/mul_grad/Mul"
  op: "Mul"
  input: "gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/shift/forward/add_grad/tuple/control_dependency"
  input: "MultivariateNormalDiag/sample/SampleNormal/sample/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/scale_matvec_linear_operator/forward/LinearOperatorDiag/matvec/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/shift/forward/add_grad/tuple/control_dependency"
  input: "encoder/sigma/Softplus"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/scale_matvec_linear_operator/forward/LinearOperatorDiag/matvec/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/scale_matvec_linear_operator/forward/LinearOperatorDiag/matvec/mul_grad/Mul"
  input: "^gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/scale_matvec_linear_operator/forward/LinearOperatorDiag/matvec/mul_grad/Mul_1"
}
node {
  name: "gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/scale_matvec_linear_operator/forward/LinearOperatorDiag/matvec/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/scale_matvec_linear_operator/forward/LinearOperatorDiag/matvec/mul_grad/Mul"
  input: "^gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/scale_matvec_linear_operator/forward/LinearOperatorDiag/matvec/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/scale_matvec_linear_operator/forward/LinearOperatorDiag/matvec/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/scale_matvec_linear_operator/forward/LinearOperatorDiag/matvec/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/scale_matvec_linear_operator/forward/LinearOperatorDiag/matvec/mul_grad/Mul_1"
  input: "^gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/scale_matvec_linear_operator/forward/LinearOperatorDiag/matvec/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/scale_matvec_linear_operator/forward/LinearOperatorDiag/matvec/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_8"
  op: "AddN"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/BroadcastTo_grad/Reshape"
  input: "gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/shift/forward/add_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/BroadcastTo_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/mu/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder/mu/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_8"
  input: "^gradients/encoder/mu/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/encoder/mu/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_8"
  input: "^gradients/encoder/mu/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/mean/BroadcastTo_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/mu/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/mu/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder/mu/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/mu/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_9"
  op: "AddN"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Abs_grad/mul"
  input: "gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/MultivariateNormalDiag/stddev/Abs_grad/mul"
  input: "gradients/MultivariateNormalDiag/sample/chain_of_shift_of_scale_matvec_linear_operator/forward/scale_matvec_linear_operator/forward/LinearOperatorDiag/matvec/mul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/MultivariateNormalDiag_CONSTRUCTED_AT_top_level/KullbackLeibler_a/MultivariateNormalDiag_1/KullbackLeibler_b/KullbackLeibler/LinearOperatorDiag/log_abs_det_1/Abs_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/sigma/Softplus_grad/Sigmoid"
  op: "Sigmoid"
  input: "encoder/sigma/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/sigma/Softplus_grad/mul"
  op: "Mul"
  input: "gradients/AddN_9"
  input: "gradients/encoder/sigma/Softplus_grad/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/mu/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/encoder/mu/BiasAdd_grad/tuple/control_dependency"
  input: "encoder/mu/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder/mu/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "concat"
  input: "gradients/encoder/mu/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/mu/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/mu/MatMul_grad/MatMul"
  input: "^gradients/encoder/mu/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/encoder/mu/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/mu/MatMul_grad/MatMul"
  input: "^gradients/encoder/mu/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/mu/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/mu/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/mu/MatMul_grad/MatMul_1"
  input: "^gradients/encoder/mu/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/mu/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/sigma/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/encoder/sigma/Softplus_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder/sigma/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/sigma/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder/sigma/Softplus_grad/mul"
}
node {
  name: "gradients/encoder/sigma/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/sigma/Softplus_grad/mul"
  input: "^gradients/encoder/sigma/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sigma/Softplus_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/sigma/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/sigma/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder/sigma/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sigma/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/sigma/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/encoder/sigma/BiasAdd_grad/tuple/control_dependency"
  input: "encoder/sigma/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder/sigma/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "concat"
  input: "gradients/encoder/sigma/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/sigma/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/sigma/MatMul_grad/MatMul"
  input: "^gradients/encoder/sigma/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/encoder/sigma/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/sigma/MatMul_grad/MatMul"
  input: "^gradients/encoder/sigma/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sigma/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/sigma/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/sigma/MatMul_grad/MatMul_1"
  input: "^gradients/encoder/sigma/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sigma/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_10"
  op: "AddN"
  input: "gradients/encoder/mu/MatMul_grad/tuple/control_dependency"
  input: "gradients/encoder/sigma/MatMul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/mu/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/concat_grad/mod"
  op: "FloorMod"
  input: "concat/axis"
  input: "gradients/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "gradients/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "gradients/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/concat_grad/mod"
  input: "gradients/concat_grad/Shape"
  input: "gradients/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/Slice"
  op: "Slice"
  input: "gradients/AddN_10"
  input: "gradients/concat_grad/ConcatOffset"
  input: "gradients/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/AddN_10"
  input: "gradients/concat_grad/ConcatOffset:1"
  input: "gradients/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/concat_grad/Slice"
  input: "^gradients/concat_grad/Slice_1"
}
node {
  name: "gradients/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/concat_grad/Slice"
  input: "^gradients/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/concat_grad/Slice_1"
  input: "^gradients/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_11/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_11/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_11"
  op: "Fill"
  input: "gradients/zeros_11/shape_as_tensor"
  input: "gradients/zeros_11/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_13/shape_as_tensor"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_13/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_13"
  op: "Fill"
  input: "gradients/zeros_13/shape_as_tensor"
  input: "gradients/zeros_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Exit_4_grad/b_exit"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Exit_4_grad/b_exit"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch:1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch:1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch:1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch:1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  op: "Fill"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/shape_as_tensor"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/b_sync"
  op: "ControlTrigger"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8"
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  op: "Fill"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/shape_as_tensor"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  op: "Fill"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/shape_as_tensor"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/b_sync"
  op: "ControlTrigger"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8"
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  op: "Fill"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/shape_as_tensor"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const_14"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Const_15"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Const_16"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Const_17"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Const_18"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
  op: "LSTMBlockCellGrad"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_3"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_3"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_3"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_3"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_4"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_peephole"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_1"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_2"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_2"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_2"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_2"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_3"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_3"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_4"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_3"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_5"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_3"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_5"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_5"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_4"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_6"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_4"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_4"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_6"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_4"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_5"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_7"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_5"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_5"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_7"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:2"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_5"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_7"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_6"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_8"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_6"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_6"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_8"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:3"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_6"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_8"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_7"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_9"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_7"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_7"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_9"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:4"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_7"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_9"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_8"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_9"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_10"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_8"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_8"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_10"
  input: "encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:5"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_8"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul"
  op: "MatMul"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 602
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice/begin"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice/size"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice"
  op: "Slice"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice/begin"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1/begin"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1/size"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1"
  op: "Slice"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1/begin"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/concat/axis"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/concat"
  op: "ConcatV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 602
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/concat"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/BiasAddGrad"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul_1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1"
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul_1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:2"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_5"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:3"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_6"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:4"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_7"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/BiasAddGrad"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const_19"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Const_20"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Const_21"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Const_22"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Const_23"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
  op: "LSTMBlockCellGrad"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_3"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_3"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_3"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_3"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_4"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_peephole"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_1"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_1"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_2"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_2"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_2"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_2"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_3"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_3"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_4"
  op: "Enter"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_3"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_5"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_3"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_5"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_3/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_5"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_4"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_6"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_4"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_4"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_6"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:1"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_4/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_4"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_5"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_7"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_5"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_5"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_7"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:2"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_5/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_5"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_7"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_6"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_8"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_6"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_6"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_8"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:3"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_6/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_6"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_8"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_7"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_9"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_7"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_7"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_9"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:4"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_7/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_7"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_9"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_8"
  op: "StackV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Const_9"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_10"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_8"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPushV2_8"
  op: "StackPushV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_10"
  input: "encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell:5"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8"
  op: "StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_8/Enter"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/f_acc_8"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul"
  op: "MatMul"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/Enter_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 602
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice/begin"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice/size"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice"
  op: "Slice"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice/begin"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1/begin"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1/size"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1"
  op: "Slice"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1/begin"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/concat/axis"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/concat"
  op: "ConcatV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad/StackPopV2_2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 602
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/concat"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/BiasAddGrad"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul_1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1"
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul_1"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:2"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_5"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:3"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_6"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad:4"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/LSTMBlockCellGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_7"
  op: "Identity"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/BiasAddGrad"
  input: "^gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_11"
  op: "AddN"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_12"
  op: "AddN"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/Add"
  op: "AddV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/Switch:1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2048
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/Add"
  op: "AddV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/Switch:1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_13"
  op: "AddN"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_14"
  op: "AddN"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_2"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/Add"
  op: "AddV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/Switch:1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2048
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/Add"
  op: "AddV2"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/Switch:1"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell_grad/tuple/control_dependency_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss"
  op: "L2Loss"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_1"
  op: "L2Loss"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_2"
  op: "L2Loss"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_3"
  op: "L2Loss"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_4"
  op: "L2Loss"
  input: "gradients/encoder/mu/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/mu/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_5"
  op: "L2Loss"
  input: "gradients/encoder/mu/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/mu/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_6"
  op: "L2Loss"
  input: "gradients/encoder/sigma/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sigma/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_7"
  op: "L2Loss"
  input: "gradients/encoder/sigma/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sigma/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_8"
  op: "L2Loss"
  input: "gradients/decoder/z_to_initial_state/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/z_to_initial_state/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_9"
  op: "L2Loss"
  input: "gradients/decoder/z_to_initial_state/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/z_to_initial_state/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_10"
  op: "L2Loss"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_11"
  op: "L2Loss"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_12"
  op: "L2Loss"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_13"
  op: "L2Loss"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_14"
  op: "L2Loss"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_15"
  op: "L2Loss"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/stack"
  op: "Pack"
  input: "global_norm/L2Loss"
  input: "global_norm/L2Loss_1"
  input: "global_norm/L2Loss_2"
  input: "global_norm/L2Loss_3"
  input: "global_norm/L2Loss_4"
  input: "global_norm/L2Loss_5"
  input: "global_norm/L2Loss_6"
  input: "global_norm/L2Loss_7"
  input: "global_norm/L2Loss_8"
  input: "global_norm/L2Loss_9"
  input: "global_norm/L2Loss_10"
  input: "global_norm/L2Loss_11"
  input: "global_norm/L2Loss_12"
  input: "global_norm/L2Loss_13"
  input: "global_norm/L2Loss_14"
  input: "global_norm/L2Loss_15"
  attr {
    key: "N"
    value {
      i: 16
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "global_norm/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/stack"
  input: "global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "global_norm/Sum"
  input: "global_norm/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_norm_1"
      }
    }
  }
}
node {
  name: "global_norm_1"
  op: "ScalarSummary"
  input: "global_norm_1/tags"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 10000.0
      }
    }
  }
}
node {
  name: "Less"
  op: "Less"
  input: "global_norm/global_norm"
  input: "Less/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Switch"
  op: "Switch"
  input: "Less"
  input: "Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/switch_t"
  op: "Identity"
  input: "cond_2/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/switch_f"
  op: "Identity"
  input: "cond_2/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/pred_id"
  op: "Identity"
  input: "Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/truediv/x"
  op: "Const"
  input: "^cond_2/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/truediv"
  op: "RealDiv"
  input: "cond_2/clip_by_global_norm/truediv/x"
  input: "cond_2/clip_by_global_norm/truediv/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/truediv/Switch"
  op: "Switch"
  input: "global_norm/global_norm"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_norm/global_norm"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/Const"
  op: "Const"
  input: "^cond_2/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/truediv_1/y"
  op: "Const"
  input: "^cond_2/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/truediv_1"
  op: "RealDiv"
  input: "cond_2/clip_by_global_norm/Const"
  input: "cond_2/clip_by_global_norm/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "cond_2/clip_by_global_norm/truediv"
  input: "cond_2/clip_by_global_norm/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul/x"
  op: "Const"
  input: "^cond_2/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul"
  op: "Mul"
  input: "cond_2/clip_by_global_norm/mul/x"
  input: "cond_2/clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/sub"
  op: "Sub"
  input: "cond_2/clip_by_global_norm/truediv/Switch:1"
  input: "cond_2/clip_by_global_norm/truediv/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/add"
  op: "AddV2"
  input: "cond_2/clip_by_global_norm/mul"
  input: "cond_2/clip_by_global_norm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_1"
  op: "Mul"
  input: "cond_2/clip_by_global_norm/mul_1/Switch:1"
  input: "cond_2/clip_by_global_norm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_1/Switch"
  op: "Switch"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_0"
  op: "Identity"
  input: "cond_2/clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_2"
  op: "Mul"
  input: "cond_2/clip_by_global_norm/mul_2/Switch:1"
  input: "cond_2/clip_by_global_norm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_2/Switch"
  op: "Switch"
  input: "gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_1"
  op: "Identity"
  input: "cond_2/clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_3"
  op: "Mul"
  input: "cond_2/clip_by_global_norm/mul_3/Switch:1"
  input: "cond_2/clip_by_global_norm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_3/Switch"
  op: "Switch"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_2"
  op: "Identity"
  input: "cond_2/clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_4"
  op: "Mul"
  input: "cond_2/clip_by_global_norm/mul_4/Switch:1"
  input: "cond_2/clip_by_global_norm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_4/Switch"
  op: "Switch"
  input: "gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_3"
  op: "Identity"
  input: "cond_2/clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/cell_0/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_5"
  op: "Mul"
  input: "cond_2/clip_by_global_norm/mul_5/Switch:1"
  input: "cond_2/clip_by_global_norm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/mu/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_5/Switch"
  op: "Switch"
  input: "gradients/encoder/mu/MatMul_grad/tuple/control_dependency_1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/mu/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_4"
  op: "Identity"
  input: "cond_2/clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/mu/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_6"
  op: "Mul"
  input: "cond_2/clip_by_global_norm/mul_6/Switch:1"
  input: "cond_2/clip_by_global_norm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/mu/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_6/Switch"
  op: "Switch"
  input: "gradients/encoder/mu/BiasAdd_grad/tuple/control_dependency_1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/mu/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_5"
  op: "Identity"
  input: "cond_2/clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/mu/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_7"
  op: "Mul"
  input: "cond_2/clip_by_global_norm/mul_7/Switch:1"
  input: "cond_2/clip_by_global_norm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sigma/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_7/Switch"
  op: "Switch"
  input: "gradients/encoder/sigma/MatMul_grad/tuple/control_dependency_1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sigma/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_6"
  op: "Identity"
  input: "cond_2/clip_by_global_norm/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sigma/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_8"
  op: "Mul"
  input: "cond_2/clip_by_global_norm/mul_8/Switch:1"
  input: "cond_2/clip_by_global_norm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sigma/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_8/Switch"
  op: "Switch"
  input: "gradients/encoder/sigma/BiasAdd_grad/tuple/control_dependency_1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sigma/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_7"
  op: "Identity"
  input: "cond_2/clip_by_global_norm/mul_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sigma/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_9"
  op: "Mul"
  input: "cond_2/clip_by_global_norm/mul_9/Switch:1"
  input: "cond_2/clip_by_global_norm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/z_to_initial_state/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_9/Switch"
  op: "Switch"
  input: "gradients/decoder/z_to_initial_state/MatMul_grad/tuple/control_dependency_1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/z_to_initial_state/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_8"
  op: "Identity"
  input: "cond_2/clip_by_global_norm/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/z_to_initial_state/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_10"
  op: "Mul"
  input: "cond_2/clip_by_global_norm/mul_10/Switch:1"
  input: "cond_2/clip_by_global_norm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/z_to_initial_state/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_10/Switch"
  op: "Switch"
  input: "gradients/decoder/z_to_initial_state/BiasAdd_grad/tuple/control_dependency_1"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/z_to_initial_state/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_9"
  op: "Identity"
  input: "cond_2/clip_by_global_norm/mul_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/z_to_initial_state/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_11"
  op: "Mul"
  input: "cond_2/clip_by_global_norm/mul_11/Switch:1"
  input: "cond_2/clip_by_global_norm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_11/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_10"
  op: "Identity"
  input: "cond_2/clip_by_global_norm/mul_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_12"
  op: "Mul"
  input: "cond_2/clip_by_global_norm/mul_12/Switch:1"
  input: "cond_2/clip_by_global_norm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_12/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_11"
  op: "Identity"
  input: "cond_2/clip_by_global_norm/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_13"
  op: "Mul"
  input: "cond_2/clip_by_global_norm/mul_13/Switch:1"
  input: "cond_2/clip_by_global_norm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_13/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_12"
  op: "Identity"
  input: "cond_2/clip_by_global_norm/mul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_14"
  op: "Mul"
  input: "cond_2/clip_by_global_norm/mul_14/Switch:1"
  input: "cond_2/clip_by_global_norm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_14/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_13"
  op: "Identity"
  input: "cond_2/clip_by_global_norm/mul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/lstm_cell/LSTMBlockCell/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_15"
  op: "Mul"
  input: "cond_2/clip_by_global_norm/mul_15/Switch:1"
  input: "cond_2/clip_by_global_norm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_15/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/b_acc_3"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_14"
  op: "Identity"
  input: "cond_2/clip_by_global_norm/mul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/output_projection/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_16"
  op: "Mul"
  input: "cond_2/clip_by_global_norm/mul_16/Switch:1"
  input: "cond_2/clip_by_global_norm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/mul_16/Switch"
  op: "Switch"
  input: "gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/b_acc_3"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_15"
  op: "Identity"
  input: "cond_2/clip_by_global_norm/mul_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/while/BasicDecoderStep/output_projection/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "cond_2/Shape"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "Z\002\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "cond_2/zeros/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/zeros"
  op: "Fill"
  input: "cond_2/Shape"
  input: "cond_2/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/Shape_1"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "cond_2/zeros_1/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/zeros_1"
  op: "Fill"
  input: "cond_2/Shape_1"
  input: "cond_2/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/Shape_2"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "Z\002\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "cond_2/zeros_2/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/zeros_2"
  op: "Fill"
  input: "cond_2/Shape_2"
  input: "cond_2/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/Shape_3"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "cond_2/zeros_3/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/zeros_3"
  op: "Fill"
  input: "cond_2/Shape_3"
  input: "cond_2/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/Shape_4"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "cond_2/zeros_4/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/zeros_4"
  op: "Fill"
  input: "cond_2/Shape_4"
  input: "cond_2/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/Shape_5"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "cond_2/zeros_5/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/zeros_5"
  op: "Fill"
  input: "cond_2/Shape_5"
  input: "cond_2/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/Shape_6"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "cond_2/zeros_6/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/zeros_6"
  op: "Fill"
  input: "cond_2/Shape_6"
  input: "cond_2/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/Shape_7"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "cond_2/zeros_7/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/zeros_7"
  op: "Fill"
  input: "cond_2/Shape_7"
  input: "cond_2/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/Shape_8"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "cond_2/zeros_8/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/zeros_8"
  op: "Fill"
  input: "cond_2/Shape_8"
  input: "cond_2/zeros_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/Shape_9"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "cond_2/zeros_9/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/zeros_9"
  op: "Fill"
  input: "cond_2/Shape_9"
  input: "cond_2/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/Shape_10"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "Z\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "cond_2/zeros_10/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/zeros_10"
  op: "Fill"
  input: "cond_2/Shape_10"
  input: "cond_2/zeros_10/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/Shape_11"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "cond_2/zeros_11/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/zeros_11"
  op: "Fill"
  input: "cond_2/Shape_11"
  input: "cond_2/zeros_11/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/Shape_12"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "cond_2/zeros_12/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/zeros_12"
  op: "Fill"
  input: "cond_2/Shape_12"
  input: "cond_2/zeros_12/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/Shape_13"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "cond_2/zeros_13/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/zeros_13"
  op: "Fill"
  input: "cond_2/Shape_13"
  input: "cond_2/zeros_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/Shape_14"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "cond_2/zeros_14/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/zeros_14"
  op: "Fill"
  input: "cond_2/Shape_14"
  input: "cond_2/zeros_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/Shape_15"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 90
      }
    }
  }
}
node {
  name: "cond_2/zeros_15/Const"
  op: "Const"
  input: "^cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "cond_2/zeros_15"
  op: "Fill"
  input: "cond_2/Shape_15"
  input: "cond_2/zeros_15/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cond_2/Merge"
  op: "Merge"
  input: "cond_2/zeros"
  input: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge_1"
  op: "Merge"
  input: "cond_2/zeros_1"
  input: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge_2"
  op: "Merge"
  input: "cond_2/zeros_2"
  input: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge_3"
  op: "Merge"
  input: "cond_2/zeros_3"
  input: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge_4"
  op: "Merge"
  input: "cond_2/zeros_4"
  input: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge_5"
  op: "Merge"
  input: "cond_2/zeros_5"
  input: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge_6"
  op: "Merge"
  input: "cond_2/zeros_6"
  input: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge_7"
  op: "Merge"
  input: "cond_2/zeros_7"
  input: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge_8"
  op: "Merge"
  input: "cond_2/zeros_8"
  input: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge_9"
  op: "Merge"
  input: "cond_2/zeros_9"
  input: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge_10"
  op: "Merge"
  input: "cond_2/zeros_10"
  input: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_10"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge_11"
  op: "Merge"
  input: "cond_2/zeros_11"
  input: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_11"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge_12"
  op: "Merge"
  input: "cond_2/zeros_12"
  input: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_12"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge_13"
  op: "Merge"
  input: "cond_2/zeros_13"
  input: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_13"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge_14"
  op: "Merge"
  input: "cond_2/zeros_14"
  input: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_14"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond_2/Merge_15"
  op: "Merge"
  input: "cond_2/zeros_15"
  input: "cond_2/clip_by_global_norm/cond_2/clip_by_global_norm/_15"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "Z\002\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 602
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "Z\002\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 602
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Fill"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "Z\002\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 602
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "Z\002\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 602
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Fill"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "encoder/mu/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "encoder/mu/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/mu/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "encoder/mu/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "encoder/mu/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/mu/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/mu/kernel/Adam/Assign"
  op: "Assign"
  input: "encoder/mu/kernel/Adam"
  input: "encoder/mu/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/mu/kernel/Adam/read"
  op: "Identity"
  input: "encoder/mu/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/mu/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "encoder/mu/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/mu/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "encoder/mu/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "encoder/mu/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/mu/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/mu/kernel/Adam_1/Assign"
  op: "Assign"
  input: "encoder/mu/kernel/Adam_1"
  input: "encoder/mu/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/mu/kernel/Adam_1/read"
  op: "Identity"
  input: "encoder/mu/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/mu/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/mu/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/mu/bias/Adam/Assign"
  op: "Assign"
  input: "encoder/mu/bias/Adam"
  input: "encoder/mu/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/mu/bias/Adam/read"
  op: "Identity"
  input: "encoder/mu/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/mu/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/mu/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/mu/bias/Adam_1/Assign"
  op: "Assign"
  input: "encoder/mu/bias/Adam_1"
  input: "encoder/mu/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/mu/bias/Adam_1/read"
  op: "Identity"
  input: "encoder/mu/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/sigma/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "encoder/sigma/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/sigma/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "encoder/sigma/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "encoder/sigma/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/sigma/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/sigma/kernel/Adam/Assign"
  op: "Assign"
  input: "encoder/sigma/kernel/Adam"
  input: "encoder/sigma/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/sigma/kernel/Adam/read"
  op: "Identity"
  input: "encoder/sigma/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/sigma/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "encoder/sigma/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/sigma/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "encoder/sigma/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "encoder/sigma/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/sigma/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/sigma/kernel/Adam_1/Assign"
  op: "Assign"
  input: "encoder/sigma/kernel/Adam_1"
  input: "encoder/sigma/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/sigma/kernel/Adam_1/read"
  op: "Identity"
  input: "encoder/sigma/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/sigma/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/sigma/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/sigma/bias/Adam/Assign"
  op: "Assign"
  input: "encoder/sigma/bias/Adam"
  input: "encoder/sigma/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/sigma/bias/Adam/read"
  op: "Identity"
  input: "encoder/sigma/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "encoder/sigma/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/sigma/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/sigma/bias/Adam_1/Assign"
  op: "Assign"
  input: "encoder/sigma/bias/Adam_1"
  input: "encoder/sigma/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/sigma/bias/Adam_1/read"
  op: "Identity"
  input: "encoder/sigma/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder/z_to_initial_state/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder/z_to_initial_state/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Adam/Assign"
  op: "Assign"
  input: "decoder/z_to_initial_state/kernel/Adam"
  input: "decoder/z_to_initial_state/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Adam/read"
  op: "Identity"
  input: "decoder/z_to_initial_state/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder/z_to_initial_state/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder/z_to_initial_state/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Adam_1/Assign"
  op: "Assign"
  input: "decoder/z_to_initial_state/kernel/Adam_1"
  input: "decoder/z_to_initial_state/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/z_to_initial_state/kernel/Adam_1/read"
  op: "Identity"
  input: "decoder/z_to_initial_state/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder/z_to_initial_state/bias/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder/z_to_initial_state/bias/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias/Adam/Assign"
  op: "Assign"
  input: "decoder/z_to_initial_state/bias/Adam"
  input: "decoder/z_to_initial_state/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias/Adam/read"
  op: "Identity"
  input: "decoder/z_to_initial_state/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder/z_to_initial_state/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder/z_to_initial_state/bias/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias/Adam_1/Assign"
  op: "Assign"
  input: "decoder/z_to_initial_state/bias/Adam_1"
  input: "decoder/z_to_initial_state/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/z_to_initial_state/bias/Adam_1/read"
  op: "Identity"
  input: "decoder/z_to_initial_state/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "Z\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 602
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "Z\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 602
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "decoder/output_projection/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "decoder/output_projection/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 90
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Adam/Assign"
  op: "Assign"
  input: "decoder/output_projection/kernel/Adam"
  input: "decoder/output_projection/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Adam/read"
  op: "Identity"
  input: "decoder/output_projection/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000Z\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "decoder/output_projection/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "decoder/output_projection/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 90
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Adam_1/Assign"
  op: "Assign"
  input: "decoder/output_projection/kernel/Adam_1"
  input: "decoder/output_projection/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/output_projection/kernel/Adam_1/read"
  op: "Identity"
  input: "decoder/output_projection/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "decoder/output_projection/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 90
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/output_projection/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 90
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/output_projection/bias/Adam/Assign"
  op: "Assign"
  input: "decoder/output_projection/bias/Adam"
  input: "decoder/output_projection/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/output_projection/bias/Adam/read"
  op: "Identity"
  input: "decoder/output_projection/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "decoder/output_projection/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 90
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/output_projection/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 90
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/output_projection/bias/Adam_1/Assign"
  op: "Assign"
  input: "decoder/output_projection/bias/Adam_1"
  input: "decoder/output_projection/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/output_projection/bias/Adam_1/read"
  op: "Identity"
  input: "decoder/output_projection/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
}
node {
  name: "train_step/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "train_step/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "train_step/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "train_step/update_encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "add_2"
  input: "train_step/beta1"
  input: "train_step/beta2"
  input: "train_step/epsilon"
  input: "cond_2/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "add_2"
  input: "train_step/beta1"
  input: "train_step/beta2"
  input: "train_step/epsilon"
  input: "cond_2/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "add_2"
  input: "train_step/beta1"
  input: "train_step/beta2"
  input: "train_step/epsilon"
  input: "cond_2/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "add_2"
  input: "train_step/beta1"
  input: "train_step/beta2"
  input: "train_step/epsilon"
  input: "cond_2/Merge_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_encoder/mu/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/mu/kernel"
  input: "encoder/mu/kernel/Adam"
  input: "encoder/mu/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "add_2"
  input: "train_step/beta1"
  input: "train_step/beta2"
  input: "train_step/epsilon"
  input: "cond_2/Merge_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_encoder/mu/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/mu/bias"
  input: "encoder/mu/bias/Adam"
  input: "encoder/mu/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "add_2"
  input: "train_step/beta1"
  input: "train_step/beta2"
  input: "train_step/epsilon"
  input: "cond_2/Merge_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_encoder/sigma/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/sigma/kernel"
  input: "encoder/sigma/kernel/Adam"
  input: "encoder/sigma/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "add_2"
  input: "train_step/beta1"
  input: "train_step/beta2"
  input: "train_step/epsilon"
  input: "cond_2/Merge_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_encoder/sigma/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/sigma/bias"
  input: "encoder/sigma/bias/Adam"
  input: "encoder/sigma/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "add_2"
  input: "train_step/beta1"
  input: "train_step/beta2"
  input: "train_step/epsilon"
  input: "cond_2/Merge_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_decoder/z_to_initial_state/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/z_to_initial_state/kernel"
  input: "decoder/z_to_initial_state/kernel/Adam"
  input: "decoder/z_to_initial_state/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "add_2"
  input: "train_step/beta1"
  input: "train_step/beta2"
  input: "train_step/epsilon"
  input: "cond_2/Merge_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_decoder/z_to_initial_state/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/z_to_initial_state/bias"
  input: "decoder/z_to_initial_state/bias/Adam"
  input: "decoder/z_to_initial_state/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "add_2"
  input: "train_step/beta1"
  input: "train_step/beta2"
  input: "train_step/epsilon"
  input: "cond_2/Merge_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "add_2"
  input: "train_step/beta1"
  input: "train_step/beta2"
  input: "train_step/epsilon"
  input: "cond_2/Merge_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_decoder/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "add_2"
  input: "train_step/beta1"
  input: "train_step/beta2"
  input: "train_step/epsilon"
  input: "cond_2/Merge_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "add_2"
  input: "train_step/beta1"
  input: "train_step/beta2"
  input: "train_step/epsilon"
  input: "cond_2/Merge_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_decoder/multi_rnn_cell/cell_1/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "add_2"
  input: "train_step/beta1"
  input: "train_step/beta2"
  input: "train_step/epsilon"
  input: "cond_2/Merge_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_decoder/output_projection/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/output_projection/kernel"
  input: "decoder/output_projection/kernel/Adam"
  input: "decoder/output_projection/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "add_2"
  input: "train_step/beta1"
  input: "train_step/beta2"
  input: "train_step/epsilon"
  input: "cond_2/Merge_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_decoder/output_projection/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/output_projection/bias"
  input: "decoder/output_projection/bias/Adam"
  input: "decoder/output_projection/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "add_2"
  input: "train_step/beta1"
  input: "train_step/beta2"
  input: "train_step/epsilon"
  input: "cond_2/Merge_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "train_step/beta1"
  input: "^train_step/update_decoder/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^train_step/update_decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^train_step/update_decoder/multi_rnn_cell/cell_1/lstm_cell/bias/ApplyAdam"
  input: "^train_step/update_decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/ApplyAdam"
  input: "^train_step/update_decoder/output_projection/bias/ApplyAdam"
  input: "^train_step/update_decoder/output_projection/kernel/ApplyAdam"
  input: "^train_step/update_decoder/z_to_initial_state/bias/ApplyAdam"
  input: "^train_step/update_decoder/z_to_initial_state/kernel/ApplyAdam"
  input: "^train_step/update_encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^train_step/update_encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^train_step/update_encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^train_step/update_encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^train_step/update_encoder/mu/bias/ApplyAdam"
  input: "^train_step/update_encoder/mu/kernel/ApplyAdam"
  input: "^train_step/update_encoder/sigma/bias/ApplyAdam"
  input: "^train_step/update_encoder/sigma/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_step/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "train_step/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_step/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "train_step/beta2"
  input: "^train_step/update_decoder/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^train_step/update_decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^train_step/update_decoder/multi_rnn_cell/cell_1/lstm_cell/bias/ApplyAdam"
  input: "^train_step/update_decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/ApplyAdam"
  input: "^train_step/update_decoder/output_projection/bias/ApplyAdam"
  input: "^train_step/update_decoder/output_projection/kernel/ApplyAdam"
  input: "^train_step/update_decoder/z_to_initial_state/bias/ApplyAdam"
  input: "^train_step/update_decoder/z_to_initial_state/kernel/ApplyAdam"
  input: "^train_step/update_encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^train_step/update_encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^train_step/update_encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^train_step/update_encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^train_step/update_encoder/mu/bias/ApplyAdam"
  input: "^train_step/update_encoder/mu/kernel/ApplyAdam"
  input: "^train_step/update_encoder/sigma/bias/ApplyAdam"
  input: "^train_step/update_encoder/sigma/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_step/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "train_step/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_step/update"
  op: "NoOp"
  input: "^train_step/Assign"
  input: "^train_step/Assign_1"
  input: "^train_step/update_decoder/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^train_step/update_decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^train_step/update_decoder/multi_rnn_cell/cell_1/lstm_cell/bias/ApplyAdam"
  input: "^train_step/update_decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/ApplyAdam"
  input: "^train_step/update_decoder/output_projection/bias/ApplyAdam"
  input: "^train_step/update_decoder/output_projection/kernel/ApplyAdam"
  input: "^train_step/update_decoder/z_to_initial_state/bias/ApplyAdam"
  input: "^train_step/update_decoder/z_to_initial_state/kernel/ApplyAdam"
  input: "^train_step/update_encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^train_step/update_encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^train_step/update_encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^train_step/update_encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^train_step/update_encoder/mu/bias/ApplyAdam"
  input: "^train_step/update_encoder/mu/kernel/ApplyAdam"
  input: "^train_step/update_encoder/sigma/bias/ApplyAdam"
  input: "^train_step/update_encoder/sigma/kernel/ApplyAdam"
}
node {
  name: "train_step/value"
  op: "Const"
  input: "^train_step/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "train_step"
  op: "AssignAdd"
  input: "global_step"
  input: "train_step/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 51
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 51
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1"
        string_val: "decoder/output_projection/bias"
        string_val: "decoder/output_projection/bias/Adam"
        string_val: "decoder/output_projection/bias/Adam_1"
        string_val: "decoder/output_projection/kernel"
        string_val: "decoder/output_projection/kernel/Adam"
        string_val: "decoder/output_projection/kernel/Adam_1"
        string_val: "decoder/z_to_initial_state/bias"
        string_val: "decoder/z_to_initial_state/bias/Adam"
        string_val: "decoder/z_to_initial_state/bias/Adam_1"
        string_val: "decoder/z_to_initial_state/kernel"
        string_val: "decoder/z_to_initial_state/kernel/Adam"
        string_val: "decoder/z_to_initial_state/kernel/Adam_1"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "encoder/mu/bias"
        string_val: "encoder/mu/bias/Adam"
        string_val: "encoder/mu/bias/Adam_1"
        string_val: "encoder/mu/kernel"
        string_val: "encoder/mu/kernel/Adam"
        string_val: "encoder/mu/kernel/Adam_1"
        string_val: "encoder/sigma/bias"
        string_val: "encoder/sigma/bias/Adam"
        string_val: "encoder/sigma/bias/Adam_1"
        string_val: "encoder/sigma/kernel"
        string_val: "encoder/sigma/kernel/Adam"
        string_val: "encoder/sigma/kernel/Adam_1"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 51
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 51
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1"
  input: "decoder/output_projection/bias"
  input: "decoder/output_projection/bias/Adam"
  input: "decoder/output_projection/bias/Adam_1"
  input: "decoder/output_projection/kernel"
  input: "decoder/output_projection/kernel/Adam"
  input: "decoder/output_projection/kernel/Adam_1"
  input: "decoder/z_to_initial_state/bias"
  input: "decoder/z_to_initial_state/bias/Adam"
  input: "decoder/z_to_initial_state/bias/Adam_1"
  input: "decoder/z_to_initial_state/kernel"
  input: "decoder/z_to_initial_state/kernel/Adam"
  input: "decoder/z_to_initial_state/kernel/Adam_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "encoder/mu/bias"
  input: "encoder/mu/bias/Adam"
  input: "encoder/mu/bias/Adam_1"
  input: "encoder/mu/kernel"
  input: "encoder/mu/kernel/Adam"
  input: "encoder/mu/kernel/Adam_1"
  input: "encoder/sigma/bias"
  input: "encoder/sigma/bias/Adam"
  input: "encoder/sigma/bias/Adam_1"
  input: "encoder/sigma/kernel"
  input: "encoder/sigma/kernel/Adam"
  input: "encoder/sigma/kernel/Adam_1"
  input: "global_step"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 51
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 51
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1"
        string_val: "decoder/output_projection/bias"
        string_val: "decoder/output_projection/bias/Adam"
        string_val: "decoder/output_projection/bias/Adam_1"
        string_val: "decoder/output_projection/kernel"
        string_val: "decoder/output_projection/kernel/Adam"
        string_val: "decoder/output_projection/kernel/Adam_1"
        string_val: "decoder/z_to_initial_state/bias"
        string_val: "decoder/z_to_initial_state/bias/Adam"
        string_val: "decoder/z_to_initial_state/bias/Adam_1"
        string_val: "decoder/z_to_initial_state/kernel"
        string_val: "decoder/z_to_initial_state/kernel/Adam"
        string_val: "decoder/z_to_initial_state/kernel/Adam_1"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "encoder/mu/bias"
        string_val: "encoder/mu/bias/Adam"
        string_val: "encoder/mu/bias/Adam_1"
        string_val: "encoder/mu/kernel"
        string_val: "encoder/mu/kernel/Adam"
        string_val: "encoder/mu/kernel/Adam_1"
        string_val: "encoder/sigma/bias"
        string_val: "encoder/sigma/bias/Adam"
        string_val: "encoder/sigma/bias/Adam_1"
        string_val: "encoder/sigma/kernel"
        string_val: "encoder/sigma/kernel/Adam"
        string_val: "encoder/sigma/kernel/Adam_1"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 51
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 51
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "decoder/output_projection/bias"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "decoder/output_projection/bias/Adam"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "decoder/output_projection/bias/Adam_1"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "decoder/output_projection/kernel"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "decoder/output_projection/kernel/Adam"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "decoder/output_projection/kernel/Adam_1"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 90
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "decoder/z_to_initial_state/bias"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "decoder/z_to_initial_state/bias/Adam"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "decoder/z_to_initial_state/bias/Adam_1"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "decoder/z_to_initial_state/kernel"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "decoder/z_to_initial_state/kernel/Adam"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "decoder/z_to_initial_state/kernel/Adam_1"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 602
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "encoder/mu/bias"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "encoder/mu/bias/Adam"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "encoder/mu/bias/Adam_1"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "encoder/mu/kernel"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "encoder/mu/kernel/Adam"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "encoder/mu/kernel/Adam_1"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "encoder/sigma/bias"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "encoder/sigma/bias/Adam"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "encoder/sigma/bias/Adam_1"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "encoder/sigma/kernel"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "encoder/sigma/kernel/Adam"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "encoder/sigma/kernel/Adam_1"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_5"
  input: "^save/Assign_50"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "AddV2"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Assign"
  input: "^decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Assign"
  input: "^decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Assign"
  input: "^decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Assign"
  input: "^decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Assign"
  input: "^decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Assign"
  input: "^decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam/Assign"
  input: "^decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1/Assign"
  input: "^decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Assign"
  input: "^decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam/Assign"
  input: "^decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1/Assign"
  input: "^decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Assign"
  input: "^decoder/output_projection/bias/Adam/Assign"
  input: "^decoder/output_projection/bias/Adam_1/Assign"
  input: "^decoder/output_projection/bias/Assign"
  input: "^decoder/output_projection/kernel/Adam/Assign"
  input: "^decoder/output_projection/kernel/Adam_1/Assign"
  input: "^decoder/output_projection/kernel/Assign"
  input: "^decoder/z_to_initial_state/bias/Adam/Assign"
  input: "^decoder/z_to_initial_state/bias/Adam_1/Assign"
  input: "^decoder/z_to_initial_state/bias/Assign"
  input: "^decoder/z_to_initial_state/kernel/Adam/Assign"
  input: "^decoder/z_to_initial_state/kernel/Adam_1/Assign"
  input: "^decoder/z_to_initial_state/kernel/Assign"
  input: "^encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Assign"
  input: "^encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Assign"
  input: "^encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Assign"
  input: "^encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Assign"
  input: "^encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Assign"
  input: "^encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Assign"
  input: "^encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Assign"
  input: "^encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Assign"
  input: "^encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Assign"
  input: "^encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Assign"
  input: "^encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Assign"
  input: "^encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Assign"
  input: "^encoder/mu/bias/Adam/Assign"
  input: "^encoder/mu/bias/Adam_1/Assign"
  input: "^encoder/mu/bias/Assign"
  input: "^encoder/mu/kernel/Adam/Assign"
  input: "^encoder/mu/kernel/Adam_1/Assign"
  input: "^encoder/mu/kernel/Assign"
  input: "^encoder/sigma/bias/Adam/Assign"
  input: "^encoder/sigma/bias/Adam_1/Assign"
  input: "^encoder/sigma/bias/Assign"
  input: "^encoder/sigma/kernel/Adam/Assign"
  input: "^encoder/sigma/kernel/Adam_1/Assign"
  input: "^encoder/sigma/kernel/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "encoder/mu/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "encoder/mu/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "encoder/sigma/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "encoder/sigma/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "decoder/z_to_initial_state/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "decoder/z_to_initial_state/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "decoder/output_projection/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "decoder/output_projection/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "encoder/mu/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "encoder/mu/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "encoder/mu/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "encoder/mu/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "encoder/sigma/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "encoder/sigma/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "encoder/sigma/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "encoder/sigma/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "decoder/z_to_initial_state/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "decoder/z_to_initial_state/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "decoder/z_to_initial_state/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "decoder/z_to_initial_state/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "decoder/output_projection/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "decoder/output_projection/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "decoder/output_projection/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "decoder/output_projection/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "accuracy/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "accuracy/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "mean_accuracy/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean_accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "mean_accuracy/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mean_accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  input: "report_uninitialized_variables/IsVariableInitialized_42"
  input: "report_uninitialized_variables/IsVariableInitialized_43"
  input: "report_uninitialized_variables/IsVariableInitialized_44"
  input: "report_uninitialized_variables/IsVariableInitialized_45"
  input: "report_uninitialized_variables/IsVariableInitialized_46"
  input: "report_uninitialized_variables/IsVariableInitialized_47"
  input: "report_uninitialized_variables/IsVariableInitialized_48"
  input: "report_uninitialized_variables/IsVariableInitialized_49"
  input: "report_uninitialized_variables/IsVariableInitialized_50"
  input: "report_uninitialized_variables/IsVariableInitialized_51"
  input: "report_uninitialized_variables/IsVariableInitialized_52"
  input: "report_uninitialized_variables/IsVariableInitialized_53"
  input: "report_uninitialized_variables/IsVariableInitialized_54"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 55
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 55
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 55
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 55
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 55
          }
        }
        string_val: "global_step"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "encoder/mu/kernel"
        string_val: "encoder/mu/bias"
        string_val: "encoder/sigma/kernel"
        string_val: "encoder/sigma/bias"
        string_val: "decoder/z_to_initial_state/kernel"
        string_val: "decoder/z_to_initial_state/bias"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
        string_val: "decoder/output_projection/kernel"
        string_val: "decoder/output_projection/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "encoder/mu/kernel/Adam"
        string_val: "encoder/mu/kernel/Adam_1"
        string_val: "encoder/mu/bias/Adam"
        string_val: "encoder/mu/bias/Adam_1"
        string_val: "encoder/sigma/kernel/Adam"
        string_val: "encoder/sigma/kernel/Adam_1"
        string_val: "encoder/sigma/bias/Adam"
        string_val: "encoder/sigma/bias/Adam_1"
        string_val: "decoder/z_to_initial_state/kernel/Adam"
        string_val: "decoder/z_to_initial_state/kernel/Adam_1"
        string_val: "decoder/z_to_initial_state/bias/Adam"
        string_val: "decoder/z_to_initial_state/bias/Adam_1"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1"
        string_val: "decoder/output_projection/kernel/Adam"
        string_val: "decoder/output_projection/kernel/Adam_1"
        string_val: "decoder/output_projection/bias/Adam"
        string_val: "decoder/output_projection/bias/Adam_1"
        string_val: "accuracy/total"
        string_val: "accuracy/count"
        string_val: "mean_accuracy/total"
        string_val: "mean_accuracy/count"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 55
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 55
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 55
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 55
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 55
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_3/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_3"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "encoder/mu/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "encoder/mu/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "encoder/sigma/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "encoder/sigma/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "decoder/z_to_initial_state/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "decoder/z_to_initial_state/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "decoder/output_projection/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "decoder/output_projection/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "encoder/mu/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "encoder/mu/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "encoder/mu/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "encoder/mu/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/mu/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "encoder/sigma/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "encoder/sigma/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "encoder/sigma/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "encoder/sigma/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/sigma/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "decoder/z_to_initial_state/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "decoder/z_to_initial_state/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "decoder/z_to_initial_state/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "decoder/z_to_initial_state/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/z_to_initial_state/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "decoder/output_projection/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "decoder/output_projection/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "decoder/output_projection/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "decoder/output_projection/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/output_projection/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  input: "report_uninitialized_variables_1/IsVariableInitialized_22"
  input: "report_uninitialized_variables_1/IsVariableInitialized_23"
  input: "report_uninitialized_variables_1/IsVariableInitialized_24"
  input: "report_uninitialized_variables_1/IsVariableInitialized_25"
  input: "report_uninitialized_variables_1/IsVariableInitialized_26"
  input: "report_uninitialized_variables_1/IsVariableInitialized_27"
  input: "report_uninitialized_variables_1/IsVariableInitialized_28"
  input: "report_uninitialized_variables_1/IsVariableInitialized_29"
  input: "report_uninitialized_variables_1/IsVariableInitialized_30"
  input: "report_uninitialized_variables_1/IsVariableInitialized_31"
  input: "report_uninitialized_variables_1/IsVariableInitialized_32"
  input: "report_uninitialized_variables_1/IsVariableInitialized_33"
  input: "report_uninitialized_variables_1/IsVariableInitialized_34"
  input: "report_uninitialized_variables_1/IsVariableInitialized_35"
  input: "report_uninitialized_variables_1/IsVariableInitialized_36"
  input: "report_uninitialized_variables_1/IsVariableInitialized_37"
  input: "report_uninitialized_variables_1/IsVariableInitialized_38"
  input: "report_uninitialized_variables_1/IsVariableInitialized_39"
  input: "report_uninitialized_variables_1/IsVariableInitialized_40"
  input: "report_uninitialized_variables_1/IsVariableInitialized_41"
  input: "report_uninitialized_variables_1/IsVariableInitialized_42"
  input: "report_uninitialized_variables_1/IsVariableInitialized_43"
  input: "report_uninitialized_variables_1/IsVariableInitialized_44"
  input: "report_uninitialized_variables_1/IsVariableInitialized_45"
  input: "report_uninitialized_variables_1/IsVariableInitialized_46"
  input: "report_uninitialized_variables_1/IsVariableInitialized_47"
  input: "report_uninitialized_variables_1/IsVariableInitialized_48"
  input: "report_uninitialized_variables_1/IsVariableInitialized_49"
  input: "report_uninitialized_variables_1/IsVariableInitialized_50"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 51
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 51
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 51
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 51
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 51
          }
        }
        string_val: "global_step"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "encoder/mu/kernel"
        string_val: "encoder/mu/bias"
        string_val: "encoder/sigma/kernel"
        string_val: "encoder/sigma/bias"
        string_val: "decoder/z_to_initial_state/kernel"
        string_val: "decoder/z_to_initial_state/bias"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias"
        string_val: "decoder/output_projection/kernel"
        string_val: "decoder/output_projection/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "encoder/cell_0/bidirectional_rnn/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "encoder/cell_0/bidirectional_rnn/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "encoder/mu/kernel/Adam"
        string_val: "encoder/mu/kernel/Adam_1"
        string_val: "encoder/mu/bias/Adam"
        string_val: "encoder/mu/bias/Adam_1"
        string_val: "encoder/sigma/kernel/Adam"
        string_val: "encoder/sigma/kernel/Adam_1"
        string_val: "encoder/sigma/bias/Adam"
        string_val: "encoder/sigma/bias/Adam_1"
        string_val: "decoder/z_to_initial_state/kernel/Adam"
        string_val: "decoder/z_to_initial_state/kernel/Adam_1"
        string_val: "decoder/z_to_initial_state/bias/Adam"
        string_val: "decoder/z_to_initial_state/bias/Adam_1"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "decoder/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/kernel/Adam_1"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam"
        string_val: "decoder/multi_rnn_cell/cell_1/lstm_cell/bias/Adam_1"
        string_val: "decoder/output_projection/kernel/Adam"
        string_val: "decoder/output_projection/kernel/Adam_1"
        string_val: "decoder/output_projection/bias/Adam"
        string_val: "decoder/output_projection/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 51
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 51
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 51
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 51
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 51
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_4/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_4"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_4/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
  input: "^accuracy/count/Assign"
  input: "^accuracy/total/Assign"
  input: "^mean_accuracy/count/Assign"
  input: "^mean_accuracy/total/Assign"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "sampling_probability"
  input: "learning_rate"
  input: "loss"
  input: "losses/r_loss"
  input: "losses/kl_loss"
  input: "losses/kl_bits"
  input: "losses/kl_beta"
  input: "global_norm_1"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
library {
  function {
    signature {
      name: "__inference_Dataset_interleave_classabc.ABCMeta_76"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_VARIANT
      }
      is_stateful: true
      control_output: "TensorSliceDataset"
    }
    node_def {
      name: "flat_filenames/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "flat_filenames"
      op: "Reshape"
      input: "args_0"
      input: "flat_filenames/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "flat_filenames:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "is_files"
        value {
          b: true
        }
      }
      attr {
        key: "metadata"
        value {
          s: ""
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_DATASET
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_STRING
              }
            }
          }
        }
      }
    }
    node_def {
      name: "FlatMapDataset"
      op: "FlatMapDataset"
      input: "TensorSliceDataset:handle:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_flat_map_read_one_file_73"
            attr {
              key: "_tf_data_function"
              value {
                b: true
              }
            }
          }
        }
      }
      attr {
        key: "metadata"
        value {
          s: ""
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_DATASET
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_STRING
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "FlatMapDataset:handle:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^TensorSliceDataset"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "_tf_data_function"
      value {
        b: true
      }
    }
    control_ret {
      key: "TensorSliceDataset"
      value: "TensorSliceDataset"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "_make_dataset_X5aC2J4u50I"
      output_arg {
        name: "prefetchdataset"
        type: DT_VARIANT
      }
      description: "Factory function for a dataset."
      is_stateful: true
    }
    node_def {
      name: "list_files/file_pattern"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "tmp/notesequences.tfrecord"
          }
        }
      }
    }
    node_def {
      name: "list_files/MatchingFiles"
      op: "MatchingFiles"
      input: "list_files/file_pattern:output:0"
    }
    node_def {
      name: "list_files/Identity"
      op: "Identity"
      input: "list_files/MatchingFiles:filenames:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "list_files/TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "list_files/Identity:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "is_files"
        value {
          b: true
        }
      }
      attr {
        key: "metadata"
        value {
          s: ""
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_DATASET
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_STRING
              }
            }
          }
        }
      }
    }
    node_def {
      name: "list_files/file_pattern_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "tmp/notesequences.tfrecord"
          }
        }
      }
    }
    node_def {
      name: "list_files/MatchingFiles_1"
      op: "MatchingFiles"
      input: "list_files/file_pattern_1:output:0"
    }
    node_def {
      name: "list_files/Identity_1"
      op: "Identity"
      input: "list_files/MatchingFiles_1:filenames:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
    }
    node_def {
      name: "list_files/Shape_1"
      op: "Shape"
      input: "list_files/Identity_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "list_files/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "list_files/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "list_files/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "list_files/strided_slice_1"
      op: "StridedSlice"
      input: "list_files/Shape_1:output:0"
      input: "list_files/strided_slice_1/stack:output:0"
      input: "list_files/strided_slice_1/stack_1:output:0"
      input: "list_files/strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "list_files/Maximum/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "list_files/Maximum"
      op: "Maximum"
      input: "list_files/strided_slice_1:output:0"
      input: "list_files/Maximum/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "list_files/seed"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "list_files/seed2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "list_files/ShuffleDataset"
      op: "ShuffleDataset"
      input: "list_files/TensorSliceDataset:handle:0"
      input: "list_files/Maximum:z:0"
      input: "list_files/seed:output:0"
      input: "list_files/seed2:output:0"
      attr {
        key: "metadata"
        value {
          s: ""
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_DATASET
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_STRING
              }
            }
          }
        }
      }
    }
    node_def {
      name: "cycle_length"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "block_length"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "buffer_output_elements"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "prefetch_input_elements"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "num_parallel_calls"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "ParallelInterleaveDatasetV4"
      op: "ParallelInterleaveDatasetV4"
      input: "list_files/ShuffleDataset:handle:0"
      input: "cycle_length:output:0"
      input: "block_length:output:0"
      input: "buffer_output_elements:output:0"
      input: "prefetch_input_elements:output:0"
      input: "num_parallel_calls:output:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "deterministic"
        value {
          s: "default"
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_interleave_classabc.ABCMeta_76"
            attr {
              key: "_tf_data_function"
              value {
                b: true
              }
            }
          }
        }
      }
      attr {
        key: "metadata"
        value {
          s: ""
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_DATASET
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_STRING
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionsDataset"
      op: "OptionsDataset"
      input: "ParallelInterleaveDatasetV4:handle:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@ParallelInterleaveDatasetV4"
          }
        }
      }
      attr {
        key: "metadata"
        value {
          s: ""
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "serialized_options"
        value {
          s: "\010\000\022\000\032\000*\000:\000"
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_DATASET
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_STRING
              }
            }
          }
        }
      }
    }
    node_def {
      name: "num_parallel_calls_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "ParallelMapDatasetV2"
      op: "ParallelMapDatasetV2"
      input: "OptionsDataset:handle:0"
      input: "num_parallel_calls_1:output:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "deterministic"
        value {
          s: "default"
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_map_NoteSequenceAugmenter.tf_augment_88"
            attr {
              key: "_tf_data_function"
              value {
                b: true
              }
            }
          }
        }
      }
      attr {
        key: "metadata"
        value {
          s: ""
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "preserve_cardinality"
        value {
          b: false
        }
      }
      attr {
        key: "use_inter_op_parallelism"
        value {
          b: true
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_DATASET
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_STRING
              }
            }
          }
        }
      }
    }
    node_def {
      name: "num_parallel_calls_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "ParallelMapDatasetV2_1"
      op: "ParallelMapDatasetV2"
      input: "ParallelMapDatasetV2:handle:0"
      input: "num_parallel_calls_2:output:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "deterministic"
        value {
          s: "default"
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_map_wrapper_101"
            attr {
              key: "_tf_data_function"
              value {
                b: true
              }
            }
          }
        }
      }
      attr {
        key: "metadata"
        value {
          s: ""
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_BOOL
            type: DT_BOOL
            type: DT_BOOL
            type: DT_INT32
          }
        }
      }
      attr {
        key: "preserve_cardinality"
        value {
          b: false
        }
      }
      attr {
        key: "use_inter_op_parallelism"
        value {
          b: true
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_DATASET
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "MapDataset"
      op: "MapDataset"
      input: "ParallelMapDatasetV2_1:handle:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_map_normalize_113"
            attr {
              key: "_tf_data_function"
              value {
                b: true
              }
            }
          }
        }
      }
      attr {
        key: "metadata"
        value {
          s: ""
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_BOOL
            type: DT_BOOL
            type: DT_BOOL
            type: DT_INT32
          }
        }
      }
      attr {
        key: "preserve_cardinality"
        value {
          b: false
        }
      }
      attr {
        key: "use_inter_op_parallelism"
        value {
          b: true
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_DATASET
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UnbatchDataset"
      op: "UnbatchDataset"
      input: "MapDataset:handle:0"
      attr {
        key: "metadata"
        value {
          s: ""
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_BOOL
            type: DT_BOOL
            type: DT_BOOL
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_DATASET
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "num_parallel_calls_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "ParallelMapDatasetV2_2"
      op: "ParallelMapDatasetV2"
      input: "UnbatchDataset:handle:0"
      input: "num_parallel_calls_3:output:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "deterministic"
        value {
          s: "default"
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_map__remove_pad_fn_140"
            attr {
              key: "_tf_data_function"
              value {
                b: true
              }
            }
          }
        }
      }
      attr {
        key: "metadata"
        value {
          s: ""
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_BOOL
            type: DT_BOOL
            type: DT_BOOL
            type: DT_INT32
          }
        }
      }
      attr {
        key: "preserve_cardinality"
        value {
          b: false
        }
      }
      attr {
        key: "use_inter_op_parallelism"
        value {
          b: true
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_DATASET
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "filename"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "CacheDataset"
      op: "CacheDataset"
      input: "ParallelMapDatasetV2_2:handle:0"
      input: "filename:output:0"
      attr {
        key: "metadata"
        value {
          s: ""
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_BOOL
            type: DT_BOOL
            type: DT_BOOL
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_DATASET
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "buffer_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 320
          }
        }
      }
    }
    node_def {
      name: "seed"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "seed2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset"
      op: "ShuffleDataset"
      input: "CacheDataset:handle:0"
      input: "buffer_size:output:0"
      input: "seed:output:0"
      input: "seed2:output:0"
      attr {
        key: "metadata"
        value {
          s: ""
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_BOOL
            type: DT_BOOL
            type: DT_BOOL
            type: DT_INT32
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_DATASET
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset"
      op: "RepeatDataset"
      input: "ShuffleDataset:handle:0"
      input: "count:output:0"
      attr {
        key: "metadata"
        value {
          s: ""
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_BOOL
            type: DT_BOOL
            type: DT_BOOL
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_DATASET
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "batch_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 32
          }
        }
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\377\377\377\377Z\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\377\377\377\377Z\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\377\377\377\377\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "padding_value"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node_def {
      name: "padding_value_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node_def {
      name: "padding_value_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node_def {
      name: "padding_value_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "drop_remainder"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: true
          }
        }
      }
    }
    node_def {
      name: "PaddedBatchDatasetV2"
      op: "PaddedBatchDatasetV2"
      input: "RepeatDataset:handle:0"
      input: "batch_size:output:0"
      input: "Const:output:0"
      input: "Const_1:output:0"
      input: "Const_2:output:0"
      input: "Const_3:output:0"
      input: "padding_value:output:0"
      input: "padding_value_1:output:0"
      input: "padding_value_2:output:0"
      input: "padding_value_3:output:0"
      input: "drop_remainder:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
            type: DT_BOOL
            type: DT_BOOL
            type: DT_INT32
          }
        }
      }
      attr {
        key: "metadata"
        value {
          s: ""
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: 32
              }
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: 32
              }
              dim {
                size: -1
              }
              dim {
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "parallel_copy"
        value {
          b: false
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_DATASET
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "buffer_size_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "PrefetchDataset"
      op: "PrefetchDataset"
      input: "PaddedBatchDatasetV2:handle:0"
      input: "buffer_size_1:output:0"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@PaddedBatchDatasetV2"
          }
        }
      }
      attr {
        key: "buffer_size_min"
        value {
          i: 0
        }
      }
      attr {
        key: "legacy_autotune"
        value {
          b: true
        }
      }
      attr {
        key: "metadata"
        value {
          s: ""
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: 32
              }
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: 32
              }
              dim {
                size: -1
              }
              dim {
              }
            }
            shape {
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_BOOL
            type: DT_BOOL
            type: DT_BOOL
            type: DT_INT32
          }
        }
      }
      attr {
        key: "slack_period"
        value {
          i: 0
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_DATASET
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    ret {
      key: "prefetchdataset"
      value: "PrefetchDataset:handle:0"
    }
    attr {
      key: "_disable_call_shape_inference"
      value {
        b: true
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map_wrapper_101"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      output_arg {
        name: "identity_1"
        type: DT_BOOL
      }
      output_arg {
        name: "identity_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity_3"
        type: DT_INT32
      }
      is_stateful: true
      control_output: "convert_and_pad"
    }
    node_def {
      name: "convert_and_pad"
      op: "EagerPyFunc"
      input: "args_0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
            type: DT_BOOL
            type: DT_BOOL
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "is_async"
        value {
          b: false
        }
      }
      attr {
        key: "token"
        value {
          s: "pyfunc_1"
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "convert_and_pad:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "convert_and_pad:output:1"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "convert_and_pad:output:2"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "convert_and_pad:output:3"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^convert_and_pad"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "_tf_data_function"
      value {
        b: true
      }
    }
    control_ret {
      key: "convert_and_pad"
      value: "convert_and_pad"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map_normalize_113"
      input_arg {
        name: "args_0"
        type: DT_BOOL
      }
      input_arg {
        name: "args_1"
        type: DT_BOOL
      }
      input_arg {
        name: "args_2"
        type: DT_BOOL
      }
      input_arg {
        name: "args_3"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      output_arg {
        name: "identity_1"
        type: DT_BOOL
      }
      output_arg {
        name: "identity_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity_3"
        type: DT_INT32
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "args_0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "args_1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "args_2"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "args_3"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: -1
            }
            dim {
              size: 90
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: -1
            }
            dim {
              size: 90
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: -1
            }
            dim {
            }
          }
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
    attr {
      key: "_tf_data_function"
      value {
        b: true
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: -1
                }
                dim {
                  size: 90
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: -1
                }
                dim {
                  size: 90
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_1"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: -1
                }
                dim {
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_2"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_3"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map_NoteSequenceAugmenter.tf_augment_88"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_STRING
      }
      is_stateful: true
      control_output: "augment"
    }
    node_def {
      name: "augment"
      op: "EagerPyFunc"
      input: "args_0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "is_async"
        value {
          b: false
        }
      }
      attr {
        key: "token"
        value {
          s: "pyfunc_0"
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "augment:output:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^augment"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "_tf_data_function"
      value {
        b: true
      }
    }
    control_ret {
      key: "augment"
      value: "augment"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map__remove_pad_fn_140"
      input_arg {
        name: "args_0"
        type: DT_BOOL
      }
      input_arg {
        name: "args_1"
        type: DT_BOOL
      }
      input_arg {
        name: "args_2"
        type: DT_BOOL
      }
      input_arg {
        name: "args_3"
        type: DT_INT32
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      output_arg {
        name: "identity_1"
        type: DT_BOOL
      }
      output_arg {
        name: "identity_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity_3"
        type: DT_INT32
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Pack"
      input: "args_3"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Pack"
      input: "Const:output:0"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "args_0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Pack"
      input: "args_3"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Pack"
      input: "Const_1:output:0"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "args_1"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Pack"
      input: "args_3"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Pack"
      input: "Const_2:output:0"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "args_2"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 90
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "args_3"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 90
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 90
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
            }
          }
          shape {
          }
        }
      }
    }
    attr {
      key: "_tf_data_function"
      value {
        b: true
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 90
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 90
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_1"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_2"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_3"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_flat_map_read_one_file_73"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_VARIANT
      }
      is_stateful: true
      control_output: "TFRecordDataset"
    }
    node_def {
      name: "compression_type"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "buffer_size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 262144
          }
        }
      }
    }
    node_def {
      name: "TFRecordDataset"
      op: "TFRecordDataset"
      input: "args_0"
      input: "compression_type:output:0"
      input: "buffer_size:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "metadata"
        value {
          s: ""
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_DATASET
          args {
            type_id: TFT_TENSOR
            args {
              type_id: TFT_STRING
            }
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "TFRecordDataset:handle:0"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      input: "^TFRecordDataset"
      attr {
        key: "_acd_function_control_output"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    attr {
      key: "_tf_data_function"
      value {
        b: true
      }
    }
    control_ret {
      key: "TFRecordDataset"
      value: "TFRecordDataset"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
}
versions {
  producer: 1087
  min_consumer: 12
}
